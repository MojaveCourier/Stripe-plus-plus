// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package coordinator_proto;

// The greeting service definition.
service coordinatorService {
  // Sends a greeting
  rpc sayHelloToCoordinator (RequestToCoordinator) returns (ReplyFromCoordinator) {};
  rpc checkalive (RequestToCoordinator) returns (ReplyFromCoordinator) {};

  // set parameters of metadata
  rpc setParameter(Parameter) returns (RepIfSetParaSuccess) {};

  // set
  rpc uploadOriginKeyValue (RequestProxyIPPort) returns (ReplyProxyIPPort) {};
  rpc reportCommitAbort (CommitAbortKey) returns (ReplyFromCoordinator) {}; //from proxy
  rpc checkCommitAbort (AskIfSuccess) returns (RepIfSuccess) {};  //from client
  rpc uploadSetValue (RequestProxyIPPort) returns (ReplyProxyIPsPorts) {};
  // append
  rpc uploadAppendValue (RequestProxyIPPort) returns (ReplyProxyIPsPorts) {};
  // get
  rpc getValue(KeyAndClientIP) returns (RepIfGetSuccess) {};

  rpc getStripe(KeyAndClientIP) returns (ReplyProxyIPsPorts) {};

  rpc getBlocks(BlockIDsAndClientIP) returns (ReplyProxyIPsPorts) {};

  rpc getDegradedReadBlocks(BlockIDsAndClientIP) returns (ReplyProxyIPsPorts) {};

  // degraded read
  rpc getDegradedReadBlock(KeyAndClientIP) returns (DegradedReadReply) {};
  rpc getDegradedReadBlockBreakdown(KeyAndClientIP) returns (DegradedReadReply) {};
  // recovery
  rpc getRecovery(KeyAndClientIP) returns (RecoveryReply) {};
  rpc getRecoveryBreakdown(KeyAndClientIP) returns (RecoveryReply) {};
  rpc fullNodeRecovery(NodeIdFromClient) returns (RepBlockNum) {};
  // delete
  rpc delByKey(KeyFromClient) returns (RepIfDeling) {};
  rpc delByStripe(StripeIdFromClient) returns (RepIfDeling) {};

  //other
  rpc listStripes(RequestToCoordinator) returns (RepStripeIds) {};
}

message Parameter {
  bool partial_decoding = 1;
  int32 encodetype = 2;
  int32 s_stripe_placementtype = 3;
  int32 m_stripe_placementtype = 4;
  int32 k_datablock = 5;
  int32 l_localparityblock = 6;
  int32 g_m_globalparityblock = 7;
  int32 b_datapergroup = 8;
  int32 x_stripepermergegroup = 9;
}

message RepIfSetParaSuccess {
  bool ifsetparameter = 1;
}

// The request message containing the user's name.
message RequestToCoordinator {
  string name = 1;
}

// The response message containing the greetings
message ReplyFromCoordinator {
  string message = 1;
}

// set
message RequestProxyIPPort {
  string key = 1;
  uint64 valuesizebytes = 2;
  string append_mode = 3;
}

message ReplyProxyIPPort {
  string proxyip = 1;
  int32 proxyport = 2;
}

message CommitAbortKey {
  string key = 1;
  bool ifcommitmetadata = 2;
  int32 opp = 3;
  int32 stripe_id = 4;
}

// append
message ReplyProxyIPsPorts {
  uint64 sum_append_size = 1;
  repeated string append_keys = 2;
  repeated string proxyips = 3;
  repeated int32 proxyports = 4;
  repeated uint64 cluster_slice_sizes = 5;
}

// set, del, merge
message AskIfSuccess {
  string key = 1;
  int32 opp = 2;
  int32 stripe_id = 3;
}

message RepIfSuccess {
  bool ifcommit = 1;
}

// get
message KeyAndClientIP {
  string key = 1;
  string clientip = 2;
  int32 clientport = 3;
}
message RepIfGetSuccess {
  bool ifgetsuccess = 1;
  int32 valuesizebytes = 2;
}
message BlockIDsAndClientIP{
  int32 start_block_id = 1;
  int32 end_block_id = 2;
  string clientip = 3;
  int32 clientport = 4;
  int32 failed_block_id = 5;
}

// delete
message KeyFromClient {
  string key = 1;
}

message StripeIdFromClient {
  int32 stripe_id = 1;
}

message NodeIdFromClient {
  int32 node_id = 1;
}

message RepIfDeling {
  bool ifdeling = 1;
}

message RepStripeIds {
  repeated int32 stripe_ids = 1;
}

message RepBlockNum {
  int32 block_num = 1;
}

message DegradedReadReply {
  double disk_io_time = 1;
  double network_time = 2;
  double decode_time = 3;
  double grpc_start_time = 4;
}

message RecoveryReply {
  double disk_read_time = 1;
  double network_time = 2;
  double decode_time = 3;
  double disk_write_time = 4;
  double grpc_start_time = 5;
}