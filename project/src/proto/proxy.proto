// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package proxy_proto;

// The greeting service definition.
service proxyService {
  // Sends a greeting
  rpc checkalive (CheckaliveCMD) returns (RequestResult);

  // encode and set
  rpc encodeAndSetObject(ObjectAndPlacement) returns (SetReply);
  // get and decode
  rpc decodeAndGetObject(ObjectAndPlacement) returns (GetReply);
  // degraded read
  rpc degradedRead(DegradedReadRequest) returns (DegradedReadReply);
  rpc degradedRead2Client(RecoveryRequest) returns (DegradedReadReply);
  rpc degradedReadBreakdown(DegradedReadRequest) returns (DegradedReadReply);
  rpc degradedRead2ClientBreakdown(RecoveryRequest) returns (DegradedReadReply);
  rpc degradedReadWithBlockStripeID(DegradedReadRequest) returns (GetReply);
  // recovery
  rpc recovery(RecoveryRequest) returns (RecoveryReply);
  rpc recoveryBreakdown(RecoveryRequest) returns (RecoveryReply);
  rpc multipleRecovery(MultipleRecoveryRequest) returns (GetReply);
  // delete
  rpc deleteBlock(NodeAndBlock) returns (DelReply);
  // append
  rpc scheduleAppend2Datanode(AppendStripeDataPlacement) returns (SetReply);
  // get stripe
  rpc getBlocks(StripeAndBlockIDs) returns (GetReply);
}

// parity block recalculation
message locationInfo {
  int32 cluster_id = 1;
  string proxy_ip = 2;
  int32 proxy_port = 3;
  repeated string datanodeip = 4;
  repeated int32 datanodeport = 5;
  repeated string blockkeys = 6;
  repeated int32 blockids = 7;
}

message mainRecalPlan {
  bool type = 1;  // to distinguish local and global
  bool if_partial_decoding = 2;
  repeated locationInfo clusters = 3;
  repeated string p_datanodeip = 4;
  repeated int32 p_datanodeport = 5;
  repeated string p_blockkeys = 6;
  int32 k = 7;
  int32 l = 8;
  int32 g_m = 9;
  int32 block_size = 10;
  int32 encodetype = 11;
  int32 stripe_id = 12;
  int32 group_id = 13;
}

message RecalReply {
  string result = 1;
}

message helpRecalPlan {
  bool type = 1;
  bool if_partial_decoding = 2;
  string mainproxyip = 3;
  int32 mainproxyport = 4;
  repeated string datanodeip = 5;
  repeated int32 datanodeport = 6;
  repeated string blockkeys = 7;
  int32 block_size = 8;
  repeated int32 blockids = 9;
  int32 parity_num = 10;
  int32 k = 11;
  int32 encodetype = 12;
}

// block relocation
message blockRelocPlan {
  repeated string blocktomove = 1;
  repeated string fromdatanodeip = 2;
  repeated int32 fromdatanodeport = 3;
  repeated string todatanodeip = 4;
  repeated int32 todatanodeport = 5;
  int32 block_size = 6;
}

message blockRelocReply {
  string result = 1;
}

message AskIfSuccess {
  int32 step = 1;
}

message RepIfSuccess {
  bool ifsuccess = 1;
}

// delete
message NodeAndBlock {
  repeated string blockkeys = 1;
  repeated string datanodeip = 2;
  repeated int32 datanodeport = 3;
  int32 stripe_id = 4;
  string key = 5;
}

message DelReply {
  bool ifcommit = 1;
}

// The request message containing the user's name.
message CheckaliveCMD {
  string name = 1;
}

// The response message containing the greetings
message RequestResult {
  bool message = 1;
}

// set and get
message ObjectAndPlacement{
  string key = 1;
  int32 valuesizebyte = 2;
  int32 k = 3;
  int32 l = 4;
  int32 g_m = 5;
  int32 stripe_id = 6;
  repeated string datanodeip = 7;
  repeated int32 datanodeport = 8;
  repeated string blockkeys = 9;
  repeated int32 blockids = 10;
  int32 block_size = 11;
  int32 encode_type = 12;
  string clientip = 13;
  int32 clientport = 14;
}

// degraded read
message DegradedReadRequest{
  string clientip = 1;
  int32 clientport = 2;
  int32 failed_block_id = 3;
  int32 failed_block_stripe_id = 4;
  string failed_block_key = 5;
  repeated string datanodeip = 6;
  repeated int32 datanodeport = 7;
  repeated string blockkeys = 8;
  repeated int32 blockids = 9;
}

message DegradedReadReply {
  double disk_io_start_time = 1;
  double disk_io_end_time = 2;
  double network_start_time = 3;
  double network_end_time = 4;
  double decode_start_time = 5;
  double decode_end_time = 6;
  double cross_rack_time = 7;
  double cross_rack_xor_time = 8;
  double grpc_start_time = 9;
  double data_node_grpc_notify_time = 10;
  double data_node_grpc_start_time = 11;
}

// recovery
message RecoveryRequest{
  string replaced_node_ip = 1;
  int32 replaced_node_port = 2;
  int32 failed_block_id = 3;
  string failed_block_key = 4;
  int32 cross_rack_num = 5;
  repeated string datanodeip = 6;
  repeated int32 datanodeport = 7;
  repeated string blockkeys = 8;
  repeated int32 blockids = 9;
}

message MultipleRecoveryRequest{
  repeated string replaced_node_ip = 1;
  repeated int32 replaced_node_port = 2;
  repeated int32 failed_block_id = 3;
  repeated string failed_block_key = 4;
  repeated int32 failed_block_stripe_id = 5;
  repeated int32 cross_rack_num = 6;
  repeated string datanodeip = 7;
  repeated int32 datanodeport = 8;
  repeated string blockkeys = 9;
  repeated int32 blockids = 10;
  repeated int32 datanode_num = 11;
  int32 failed_block_num = 12;
}

message RecoveryReply {
  double disk_io_start_time = 1;
  double disk_io_end_time = 2;
  double network_start_time = 3;
  double network_end_time = 4;
  double decode_start_time = 5;
  double decode_end_time = 6;
  double cross_rack_time = 7;
  double cross_rack_xor_time = 8;
  double grpc_start_time = 9;
  double data_node_grpc_notify_time = 10;
  double data_node_grpc_start_time = 11;
  double dest_data_node_network_time = 12;
  double dest_data_node_disk_io_time = 13;
  
}

// append
message AppendStripeDataPlacement{
  string key = 1;
  int32 cluster_id = 2;
  int32 stripe_id = 3;
  // sum of all append slices within the cluster
  uint64 append_size = 4;
  repeated string datanodeip = 5;
  repeated int32 datanodeport = 6;
  repeated string blockkeys = 7;
  repeated int32 blockids = 8;
  // physical offset of each append slice within each block
  repeated uint64 offsets = 9;
  repeated uint64 sizes = 10;
  bool is_merge_parity = 11;
  string append_mode = 12;
  bool is_serialized = 13;
}

message SetReply {
  bool ifcommit = 1;
}
message GetReply {
  bool getsuccess = 1;
}
message StripeAndBlockIDs{
  int32 stripe_id = 1;
  int32 group_id = 2;
  string clientip = 3;
  int32 clientport = 4;
  repeated int32 block_ids = 5;
  repeated string block_keys = 6;
  repeated string datanodeips = 7;
  repeated int32 datanodeports = 8;
}