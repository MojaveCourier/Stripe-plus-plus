// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proxy.proto

#include "proxy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proxy_proto {
PROTOBUF_CONSTEXPR locationInfo::locationInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datanodeip_)*/{}
  , /*decltype(_impl_.datanodeport_)*/{}
  , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
  , /*decltype(_impl_.blockkeys_)*/{}
  , /*decltype(_impl_.blockids_)*/{}
  , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.proxy_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cluster_id_)*/0
  , /*decltype(_impl_.proxy_port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct locationInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR locationInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~locationInfoDefaultTypeInternal() {}
  union {
    locationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 locationInfoDefaultTypeInternal _locationInfo_default_instance_;
PROTOBUF_CONSTEXPR mainRecalPlan::mainRecalPlan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clusters_)*/{}
  , /*decltype(_impl_.p_datanodeip_)*/{}
  , /*decltype(_impl_.p_datanodeport_)*/{}
  , /*decltype(_impl_._p_datanodeport_cached_byte_size_)*/{0}
  , /*decltype(_impl_.p_blockkeys_)*/{}
  , /*decltype(_impl_.type_)*/false
  , /*decltype(_impl_.if_partial_decoding_)*/false
  , /*decltype(_impl_.k_)*/0
  , /*decltype(_impl_.l_)*/0
  , /*decltype(_impl_.g_m_)*/0
  , /*decltype(_impl_.block_size_)*/0
  , /*decltype(_impl_.encodetype_)*/0
  , /*decltype(_impl_.stripe_id_)*/0
  , /*decltype(_impl_.group_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct mainRecalPlanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR mainRecalPlanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~mainRecalPlanDefaultTypeInternal() {}
  union {
    mainRecalPlan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 mainRecalPlanDefaultTypeInternal _mainRecalPlan_default_instance_;
PROTOBUF_CONSTEXPR RecalReply::RecalReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecalReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecalReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecalReplyDefaultTypeInternal() {}
  union {
    RecalReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecalReplyDefaultTypeInternal _RecalReply_default_instance_;
PROTOBUF_CONSTEXPR helpRecalPlan::helpRecalPlan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datanodeip_)*/{}
  , /*decltype(_impl_.datanodeport_)*/{}
  , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
  , /*decltype(_impl_.blockkeys_)*/{}
  , /*decltype(_impl_.blockids_)*/{}
  , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.mainproxyip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/false
  , /*decltype(_impl_.if_partial_decoding_)*/false
  , /*decltype(_impl_.mainproxyport_)*/0
  , /*decltype(_impl_.block_size_)*/0
  , /*decltype(_impl_.parity_num_)*/0
  , /*decltype(_impl_.k_)*/0
  , /*decltype(_impl_.encodetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct helpRecalPlanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR helpRecalPlanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~helpRecalPlanDefaultTypeInternal() {}
  union {
    helpRecalPlan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 helpRecalPlanDefaultTypeInternal _helpRecalPlan_default_instance_;
PROTOBUF_CONSTEXPR blockRelocPlan::blockRelocPlan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blocktomove_)*/{}
  , /*decltype(_impl_.fromdatanodeip_)*/{}
  , /*decltype(_impl_.fromdatanodeport_)*/{}
  , /*decltype(_impl_._fromdatanodeport_cached_byte_size_)*/{0}
  , /*decltype(_impl_.todatanodeip_)*/{}
  , /*decltype(_impl_.todatanodeport_)*/{}
  , /*decltype(_impl_._todatanodeport_cached_byte_size_)*/{0}
  , /*decltype(_impl_.block_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct blockRelocPlanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR blockRelocPlanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~blockRelocPlanDefaultTypeInternal() {}
  union {
    blockRelocPlan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 blockRelocPlanDefaultTypeInternal _blockRelocPlan_default_instance_;
PROTOBUF_CONSTEXPR blockRelocReply::blockRelocReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct blockRelocReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR blockRelocReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~blockRelocReplyDefaultTypeInternal() {}
  union {
    blockRelocReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 blockRelocReplyDefaultTypeInternal _blockRelocReply_default_instance_;
PROTOBUF_CONSTEXPR AskIfSuccess::AskIfSuccess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.step_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AskIfSuccessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AskIfSuccessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AskIfSuccessDefaultTypeInternal() {}
  union {
    AskIfSuccess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AskIfSuccessDefaultTypeInternal _AskIfSuccess_default_instance_;
PROTOBUF_CONSTEXPR RepIfSuccess::RepIfSuccess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ifsuccess_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RepIfSuccessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RepIfSuccessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RepIfSuccessDefaultTypeInternal() {}
  union {
    RepIfSuccess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RepIfSuccessDefaultTypeInternal _RepIfSuccess_default_instance_;
PROTOBUF_CONSTEXPR NodeAndBlock::NodeAndBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.blockkeys_)*/{}
  , /*decltype(_impl_.datanodeip_)*/{}
  , /*decltype(_impl_.datanodeport_)*/{}
  , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stripe_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NodeAndBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeAndBlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeAndBlockDefaultTypeInternal() {}
  union {
    NodeAndBlock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeAndBlockDefaultTypeInternal _NodeAndBlock_default_instance_;
PROTOBUF_CONSTEXPR DelReply::DelReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ifcommit_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DelReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DelReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DelReplyDefaultTypeInternal() {}
  union {
    DelReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DelReplyDefaultTypeInternal _DelReply_default_instance_;
PROTOBUF_CONSTEXPR CheckaliveCMD::CheckaliveCMD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CheckaliveCMDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckaliveCMDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckaliveCMDDefaultTypeInternal() {}
  union {
    CheckaliveCMD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckaliveCMDDefaultTypeInternal _CheckaliveCMD_default_instance_;
PROTOBUF_CONSTEXPR RequestResult::RequestResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestResultDefaultTypeInternal() {}
  union {
    RequestResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestResultDefaultTypeInternal _RequestResult_default_instance_;
PROTOBUF_CONSTEXPR ObjectAndPlacement::ObjectAndPlacement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datanodeip_)*/{}
  , /*decltype(_impl_.datanodeport_)*/{}
  , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
  , /*decltype(_impl_.blockkeys_)*/{}
  , /*decltype(_impl_.blockids_)*/{}
  , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.valuesizebyte_)*/0
  , /*decltype(_impl_.k_)*/0
  , /*decltype(_impl_.l_)*/0
  , /*decltype(_impl_.g_m_)*/0
  , /*decltype(_impl_.stripe_id_)*/0
  , /*decltype(_impl_.block_size_)*/0
  , /*decltype(_impl_.encode_type_)*/0
  , /*decltype(_impl_.clientport_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectAndPlacementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectAndPlacementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectAndPlacementDefaultTypeInternal() {}
  union {
    ObjectAndPlacement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectAndPlacementDefaultTypeInternal _ObjectAndPlacement_default_instance_;
PROTOBUF_CONSTEXPR DegradedReadRequest::DegradedReadRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datanodeip_)*/{}
  , /*decltype(_impl_.datanodeport_)*/{}
  , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
  , /*decltype(_impl_.blockkeys_)*/{}
  , /*decltype(_impl_.blockids_)*/{}
  , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.clientip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.failed_block_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.clientport_)*/0
  , /*decltype(_impl_.failed_block_id_)*/0
  , /*decltype(_impl_.failed_block_stripe_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DegradedReadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DegradedReadRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DegradedReadRequestDefaultTypeInternal() {}
  union {
    DegradedReadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DegradedReadRequestDefaultTypeInternal _DegradedReadRequest_default_instance_;
PROTOBUF_CONSTEXPR DegradedReadReply::DegradedReadReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.disk_io_start_time_)*/0
  , /*decltype(_impl_.disk_io_end_time_)*/0
  , /*decltype(_impl_.network_start_time_)*/0
  , /*decltype(_impl_.network_end_time_)*/0
  , /*decltype(_impl_.decode_start_time_)*/0
  , /*decltype(_impl_.decode_end_time_)*/0
  , /*decltype(_impl_.cross_rack_time_)*/0
  , /*decltype(_impl_.cross_rack_xor_time_)*/0
  , /*decltype(_impl_.grpc_start_time_)*/0
  , /*decltype(_impl_.data_node_grpc_notify_time_)*/0
  , /*decltype(_impl_.data_node_grpc_start_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DegradedReadReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DegradedReadReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DegradedReadReplyDefaultTypeInternal() {}
  union {
    DegradedReadReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DegradedReadReplyDefaultTypeInternal _DegradedReadReply_default_instance_;
PROTOBUF_CONSTEXPR RecoveryRequest::RecoveryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datanodeip_)*/{}
  , /*decltype(_impl_.datanodeport_)*/{}
  , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
  , /*decltype(_impl_.blockkeys_)*/{}
  , /*decltype(_impl_.blockids_)*/{}
  , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.proxyip_)*/{}
  , /*decltype(_impl_.proxyport_)*/{}
  , /*decltype(_impl_._proxyport_cached_byte_size_)*/{0}
  , /*decltype(_impl_.replaced_node_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.failed_block_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.replaced_node_port_)*/0
  , /*decltype(_impl_.failed_block_id_)*/0
  , /*decltype(_impl_.cross_rack_num_)*/0
  , /*decltype(_impl_.is_to_send_block_id_)*/false
  , /*decltype(_impl_.block_id_to_send_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecoveryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecoveryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecoveryRequestDefaultTypeInternal() {}
  union {
    RecoveryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecoveryRequestDefaultTypeInternal _RecoveryRequest_default_instance_;
PROTOBUF_CONSTEXPR MultipleRecoveryRequest::MultipleRecoveryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.replaced_node_ip_)*/{}
  , /*decltype(_impl_.replaced_node_port_)*/{}
  , /*decltype(_impl_._replaced_node_port_cached_byte_size_)*/{0}
  , /*decltype(_impl_.failed_block_id_)*/{}
  , /*decltype(_impl_._failed_block_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.failed_block_key_)*/{}
  , /*decltype(_impl_.failed_block_stripe_id_)*/{}
  , /*decltype(_impl_._failed_block_stripe_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.cross_rack_num_)*/{}
  , /*decltype(_impl_._cross_rack_num_cached_byte_size_)*/{0}
  , /*decltype(_impl_.datanodeip_)*/{}
  , /*decltype(_impl_.datanodeport_)*/{}
  , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
  , /*decltype(_impl_.blockkeys_)*/{}
  , /*decltype(_impl_.blockids_)*/{}
  , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.datanode_num_)*/{}
  , /*decltype(_impl_._datanode_num_cached_byte_size_)*/{0}
  , /*decltype(_impl_.failed_block_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultipleRecoveryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultipleRecoveryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultipleRecoveryRequestDefaultTypeInternal() {}
  union {
    MultipleRecoveryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultipleRecoveryRequestDefaultTypeInternal _MultipleRecoveryRequest_default_instance_;
PROTOBUF_CONSTEXPR RecoveryReply::RecoveryReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.disk_io_start_time_)*/0
  , /*decltype(_impl_.disk_io_end_time_)*/0
  , /*decltype(_impl_.network_start_time_)*/0
  , /*decltype(_impl_.network_end_time_)*/0
  , /*decltype(_impl_.decode_start_time_)*/0
  , /*decltype(_impl_.decode_end_time_)*/0
  , /*decltype(_impl_.cross_rack_time_)*/0
  , /*decltype(_impl_.cross_rack_xor_time_)*/0
  , /*decltype(_impl_.grpc_start_time_)*/0
  , /*decltype(_impl_.data_node_grpc_notify_time_)*/0
  , /*decltype(_impl_.data_node_grpc_start_time_)*/0
  , /*decltype(_impl_.dest_data_node_network_time_)*/0
  , /*decltype(_impl_.dest_data_node_disk_io_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecoveryReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecoveryReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecoveryReplyDefaultTypeInternal() {}
  union {
    RecoveryReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecoveryReplyDefaultTypeInternal _RecoveryReply_default_instance_;
PROTOBUF_CONSTEXPR AppendStripeDataPlacement::AppendStripeDataPlacement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.datanodeip_)*/{}
  , /*decltype(_impl_.datanodeport_)*/{}
  , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
  , /*decltype(_impl_.blockkeys_)*/{}
  , /*decltype(_impl_.blockids_)*/{}
  , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.offsets_)*/{}
  , /*decltype(_impl_._offsets_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sizes_)*/{}
  , /*decltype(_impl_._sizes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.append_mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cluster_id_)*/0
  , /*decltype(_impl_.stripe_id_)*/0
  , /*decltype(_impl_.append_size_)*/uint64_t{0u}
  , /*decltype(_impl_.is_merge_parity_)*/false
  , /*decltype(_impl_.is_serialized_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppendStripeDataPlacementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendStripeDataPlacementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendStripeDataPlacementDefaultTypeInternal() {}
  union {
    AppendStripeDataPlacement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendStripeDataPlacementDefaultTypeInternal _AppendStripeDataPlacement_default_instance_;
PROTOBUF_CONSTEXPR SetReply::SetReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ifcommit_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetReplyDefaultTypeInternal() {}
  union {
    SetReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetReplyDefaultTypeInternal _SetReply_default_instance_;
PROTOBUF_CONSTEXPR GetReply::GetReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.getsuccess_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetReplyDefaultTypeInternal() {}
  union {
    GetReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetReplyDefaultTypeInternal _GetReply_default_instance_;
PROTOBUF_CONSTEXPR StripeAndBlockIDs::StripeAndBlockIDs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_ids_)*/{}
  , /*decltype(_impl_._block_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.block_keys_)*/{}
  , /*decltype(_impl_.datanodeips_)*/{}
  , /*decltype(_impl_.datanodeports_)*/{}
  , /*decltype(_impl_._datanodeports_cached_byte_size_)*/{0}
  , /*decltype(_impl_.clientip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stripe_id_)*/0
  , /*decltype(_impl_.group_id_)*/0
  , /*decltype(_impl_.clientport_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StripeAndBlockIDsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StripeAndBlockIDsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StripeAndBlockIDsDefaultTypeInternal() {}
  union {
    StripeAndBlockIDs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StripeAndBlockIDsDefaultTypeInternal _StripeAndBlockIDs_default_instance_;
}  // namespace proxy_proto
static ::_pb::Metadata file_level_metadata_proxy_2eproto[22];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proxy_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proxy_2eproto = nullptr;

const uint32_t TableStruct_proxy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::locationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::locationInfo, _impl_.cluster_id_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::locationInfo, _impl_.proxy_ip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::locationInfo, _impl_.proxy_port_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::locationInfo, _impl_.datanodeip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::locationInfo, _impl_.datanodeport_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::locationInfo, _impl_.blockkeys_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::locationInfo, _impl_.blockids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::mainRecalPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::mainRecalPlan, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::mainRecalPlan, _impl_.if_partial_decoding_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::mainRecalPlan, _impl_.clusters_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::mainRecalPlan, _impl_.p_datanodeip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::mainRecalPlan, _impl_.p_datanodeport_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::mainRecalPlan, _impl_.p_blockkeys_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::mainRecalPlan, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::mainRecalPlan, _impl_.l_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::mainRecalPlan, _impl_.g_m_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::mainRecalPlan, _impl_.block_size_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::mainRecalPlan, _impl_.encodetype_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::mainRecalPlan, _impl_.stripe_id_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::mainRecalPlan, _impl_.group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecalReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecalReply, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::helpRecalPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::helpRecalPlan, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::helpRecalPlan, _impl_.if_partial_decoding_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::helpRecalPlan, _impl_.mainproxyip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::helpRecalPlan, _impl_.mainproxyport_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::helpRecalPlan, _impl_.datanodeip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::helpRecalPlan, _impl_.datanodeport_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::helpRecalPlan, _impl_.blockkeys_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::helpRecalPlan, _impl_.block_size_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::helpRecalPlan, _impl_.blockids_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::helpRecalPlan, _impl_.parity_num_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::helpRecalPlan, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::helpRecalPlan, _impl_.encodetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::blockRelocPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::blockRelocPlan, _impl_.blocktomove_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::blockRelocPlan, _impl_.fromdatanodeip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::blockRelocPlan, _impl_.fromdatanodeport_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::blockRelocPlan, _impl_.todatanodeip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::blockRelocPlan, _impl_.todatanodeport_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::blockRelocPlan, _impl_.block_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::blockRelocReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::blockRelocReply, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::AskIfSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::AskIfSuccess, _impl_.step_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RepIfSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RepIfSuccess, _impl_.ifsuccess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::NodeAndBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::NodeAndBlock, _impl_.blockkeys_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::NodeAndBlock, _impl_.datanodeip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::NodeAndBlock, _impl_.datanodeport_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::NodeAndBlock, _impl_.stripe_id_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::NodeAndBlock, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DelReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DelReply, _impl_.ifcommit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::CheckaliveCMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::CheckaliveCMD, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RequestResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RequestResult, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.valuesizebyte_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.l_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.g_m_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.stripe_id_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.datanodeip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.datanodeport_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.blockkeys_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.blockids_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.block_size_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.encode_type_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.clientip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::ObjectAndPlacement, _impl_.clientport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadRequest, _impl_.clientip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadRequest, _impl_.clientport_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadRequest, _impl_.failed_block_id_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadRequest, _impl_.failed_block_stripe_id_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadRequest, _impl_.failed_block_key_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadRequest, _impl_.datanodeip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadRequest, _impl_.datanodeport_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadRequest, _impl_.blockkeys_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadRequest, _impl_.blockids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadReply, _impl_.disk_io_start_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadReply, _impl_.disk_io_end_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadReply, _impl_.network_start_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadReply, _impl_.network_end_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadReply, _impl_.decode_start_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadReply, _impl_.decode_end_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadReply, _impl_.cross_rack_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadReply, _impl_.cross_rack_xor_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadReply, _impl_.grpc_start_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadReply, _impl_.data_node_grpc_notify_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::DegradedReadReply, _impl_.data_node_grpc_start_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryRequest, _impl_.replaced_node_ip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryRequest, _impl_.replaced_node_port_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryRequest, _impl_.failed_block_id_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryRequest, _impl_.failed_block_key_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryRequest, _impl_.cross_rack_num_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryRequest, _impl_.datanodeip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryRequest, _impl_.datanodeport_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryRequest, _impl_.blockkeys_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryRequest, _impl_.blockids_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryRequest, _impl_.proxyip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryRequest, _impl_.proxyport_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryRequest, _impl_.is_to_send_block_id_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryRequest, _impl_.block_id_to_send_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::MultipleRecoveryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::MultipleRecoveryRequest, _impl_.replaced_node_ip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::MultipleRecoveryRequest, _impl_.replaced_node_port_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::MultipleRecoveryRequest, _impl_.failed_block_id_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::MultipleRecoveryRequest, _impl_.failed_block_key_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::MultipleRecoveryRequest, _impl_.failed_block_stripe_id_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::MultipleRecoveryRequest, _impl_.cross_rack_num_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::MultipleRecoveryRequest, _impl_.datanodeip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::MultipleRecoveryRequest, _impl_.datanodeport_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::MultipleRecoveryRequest, _impl_.blockkeys_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::MultipleRecoveryRequest, _impl_.blockids_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::MultipleRecoveryRequest, _impl_.datanode_num_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::MultipleRecoveryRequest, _impl_.failed_block_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryReply, _impl_.disk_io_start_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryReply, _impl_.disk_io_end_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryReply, _impl_.network_start_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryReply, _impl_.network_end_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryReply, _impl_.decode_start_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryReply, _impl_.decode_end_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryReply, _impl_.cross_rack_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryReply, _impl_.cross_rack_xor_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryReply, _impl_.grpc_start_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryReply, _impl_.data_node_grpc_notify_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryReply, _impl_.data_node_grpc_start_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryReply, _impl_.dest_data_node_network_time_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::RecoveryReply, _impl_.dest_data_node_disk_io_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::AppendStripeDataPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::AppendStripeDataPlacement, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::AppendStripeDataPlacement, _impl_.cluster_id_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::AppendStripeDataPlacement, _impl_.stripe_id_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::AppendStripeDataPlacement, _impl_.append_size_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::AppendStripeDataPlacement, _impl_.datanodeip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::AppendStripeDataPlacement, _impl_.datanodeport_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::AppendStripeDataPlacement, _impl_.blockkeys_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::AppendStripeDataPlacement, _impl_.blockids_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::AppendStripeDataPlacement, _impl_.offsets_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::AppendStripeDataPlacement, _impl_.sizes_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::AppendStripeDataPlacement, _impl_.is_merge_parity_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::AppendStripeDataPlacement, _impl_.append_mode_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::AppendStripeDataPlacement, _impl_.is_serialized_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::SetReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::SetReply, _impl_.ifcommit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::GetReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::GetReply, _impl_.getsuccess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::StripeAndBlockIDs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proxy_proto::StripeAndBlockIDs, _impl_.stripe_id_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::StripeAndBlockIDs, _impl_.group_id_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::StripeAndBlockIDs, _impl_.clientip_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::StripeAndBlockIDs, _impl_.clientport_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::StripeAndBlockIDs, _impl_.block_ids_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::StripeAndBlockIDs, _impl_.block_keys_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::StripeAndBlockIDs, _impl_.datanodeips_),
  PROTOBUF_FIELD_OFFSET(::proxy_proto::StripeAndBlockIDs, _impl_.datanodeports_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proxy_proto::locationInfo)},
  { 13, -1, -1, sizeof(::proxy_proto::mainRecalPlan)},
  { 32, -1, -1, sizeof(::proxy_proto::RecalReply)},
  { 39, -1, -1, sizeof(::proxy_proto::helpRecalPlan)},
  { 57, -1, -1, sizeof(::proxy_proto::blockRelocPlan)},
  { 69, -1, -1, sizeof(::proxy_proto::blockRelocReply)},
  { 76, -1, -1, sizeof(::proxy_proto::AskIfSuccess)},
  { 83, -1, -1, sizeof(::proxy_proto::RepIfSuccess)},
  { 90, -1, -1, sizeof(::proxy_proto::NodeAndBlock)},
  { 101, -1, -1, sizeof(::proxy_proto::DelReply)},
  { 108, -1, -1, sizeof(::proxy_proto::CheckaliveCMD)},
  { 115, -1, -1, sizeof(::proxy_proto::RequestResult)},
  { 122, -1, -1, sizeof(::proxy_proto::ObjectAndPlacement)},
  { 142, -1, -1, sizeof(::proxy_proto::DegradedReadRequest)},
  { 157, -1, -1, sizeof(::proxy_proto::DegradedReadReply)},
  { 174, -1, -1, sizeof(::proxy_proto::RecoveryRequest)},
  { 193, -1, -1, sizeof(::proxy_proto::MultipleRecoveryRequest)},
  { 211, -1, -1, sizeof(::proxy_proto::RecoveryReply)},
  { 230, -1, -1, sizeof(::proxy_proto::AppendStripeDataPlacement)},
  { 249, -1, -1, sizeof(::proxy_proto::SetReply)},
  { 256, -1, -1, sizeof(::proxy_proto::GetReply)},
  { 263, -1, -1, sizeof(::proxy_proto::StripeAndBlockIDs)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proxy_proto::_locationInfo_default_instance_._instance,
  &::proxy_proto::_mainRecalPlan_default_instance_._instance,
  &::proxy_proto::_RecalReply_default_instance_._instance,
  &::proxy_proto::_helpRecalPlan_default_instance_._instance,
  &::proxy_proto::_blockRelocPlan_default_instance_._instance,
  &::proxy_proto::_blockRelocReply_default_instance_._instance,
  &::proxy_proto::_AskIfSuccess_default_instance_._instance,
  &::proxy_proto::_RepIfSuccess_default_instance_._instance,
  &::proxy_proto::_NodeAndBlock_default_instance_._instance,
  &::proxy_proto::_DelReply_default_instance_._instance,
  &::proxy_proto::_CheckaliveCMD_default_instance_._instance,
  &::proxy_proto::_RequestResult_default_instance_._instance,
  &::proxy_proto::_ObjectAndPlacement_default_instance_._instance,
  &::proxy_proto::_DegradedReadRequest_default_instance_._instance,
  &::proxy_proto::_DegradedReadReply_default_instance_._instance,
  &::proxy_proto::_RecoveryRequest_default_instance_._instance,
  &::proxy_proto::_MultipleRecoveryRequest_default_instance_._instance,
  &::proxy_proto::_RecoveryReply_default_instance_._instance,
  &::proxy_proto::_AppendStripeDataPlacement_default_instance_._instance,
  &::proxy_proto::_SetReply_default_instance_._instance,
  &::proxy_proto::_GetReply_default_instance_._instance,
  &::proxy_proto::_StripeAndBlockIDs_default_instance_._instance,
};

const char descriptor_table_protodef_proxy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013proxy.proto\022\013proxy_proto\"\227\001\n\014locationI"
  "nfo\022\022\n\ncluster_id\030\001 \001(\005\022\020\n\010proxy_ip\030\002 \001("
  "\t\022\022\n\nproxy_port\030\003 \001(\005\022\022\n\ndatanodeip\030\004 \003("
  "\t\022\024\n\014datanodeport\030\005 \003(\005\022\021\n\tblockkeys\030\006 \003"
  "(\t\022\020\n\010blockids\030\007 \003(\005\"\232\002\n\rmainRecalPlan\022\014"
  "\n\004type\030\001 \001(\010\022\033\n\023if_partial_decoding\030\002 \001("
  "\010\022+\n\010clusters\030\003 \003(\0132\031.proxy_proto.locati"
  "onInfo\022\024\n\014p_datanodeip\030\004 \003(\t\022\026\n\016p_datano"
  "deport\030\005 \003(\005\022\023\n\013p_blockkeys\030\006 \003(\t\022\t\n\001k\030\007"
  " \001(\005\022\t\n\001l\030\010 \001(\005\022\013\n\003g_m\030\t \001(\005\022\022\n\nblock_si"
  "ze\030\n \001(\005\022\022\n\nencodetype\030\013 \001(\005\022\021\n\tstripe_i"
  "d\030\014 \001(\005\022\020\n\010group_id\030\r \001(\005\"\034\n\nRecalReply\022"
  "\016\n\006result\030\001 \001(\t\"\374\001\n\rhelpRecalPlan\022\014\n\004typ"
  "e\030\001 \001(\010\022\033\n\023if_partial_decoding\030\002 \001(\010\022\023\n\013"
  "mainproxyip\030\003 \001(\t\022\025\n\rmainproxyport\030\004 \001(\005"
  "\022\022\n\ndatanodeip\030\005 \003(\t\022\024\n\014datanodeport\030\006 \003"
  "(\005\022\021\n\tblockkeys\030\007 \003(\t\022\022\n\nblock_size\030\010 \001("
  "\005\022\020\n\010blockids\030\t \003(\005\022\022\n\nparity_num\030\n \001(\005\022"
  "\t\n\001k\030\013 \001(\005\022\022\n\nencodetype\030\014 \001(\005\"\231\001\n\016block"
  "RelocPlan\022\023\n\013blocktomove\030\001 \003(\t\022\026\n\016fromda"
  "tanodeip\030\002 \003(\t\022\030\n\020fromdatanodeport\030\003 \003(\005"
  "\022\024\n\014todatanodeip\030\004 \003(\t\022\026\n\016todatanodeport"
  "\030\005 \003(\005\022\022\n\nblock_size\030\006 \001(\005\"!\n\017blockReloc"
  "Reply\022\016\n\006result\030\001 \001(\t\"\034\n\014AskIfSuccess\022\014\n"
  "\004step\030\001 \001(\005\"!\n\014RepIfSuccess\022\021\n\tifsuccess"
  "\030\001 \001(\010\"k\n\014NodeAndBlock\022\021\n\tblockkeys\030\001 \003("
  "\t\022\022\n\ndatanodeip\030\002 \003(\t\022\024\n\014datanodeport\030\003 "
  "\003(\005\022\021\n\tstripe_id\030\004 \001(\005\022\013\n\003key\030\005 \001(\t\"\034\n\010D"
  "elReply\022\020\n\010ifcommit\030\001 \001(\010\"\035\n\rCheckaliveC"
  "MD\022\014\n\004name\030\001 \001(\t\" \n\rRequestResult\022\017\n\007mes"
  "sage\030\001 \001(\010\"\214\002\n\022ObjectAndPlacement\022\013\n\003key"
  "\030\001 \001(\t\022\025\n\rvaluesizebyte\030\002 \001(\005\022\t\n\001k\030\003 \001(\005"
  "\022\t\n\001l\030\004 \001(\005\022\013\n\003g_m\030\005 \001(\005\022\021\n\tstripe_id\030\006 "
  "\001(\005\022\022\n\ndatanodeip\030\007 \003(\t\022\024\n\014datanodeport\030"
  "\010 \003(\005\022\021\n\tblockkeys\030\t \003(\t\022\020\n\010blockids\030\n \003"
  "(\005\022\022\n\nblock_size\030\013 \001(\005\022\023\n\013encode_type\030\014 "
  "\001(\005\022\020\n\010clientip\030\r \001(\t\022\022\n\nclientport\030\016 \001("
  "\005\"\335\001\n\023DegradedReadRequest\022\020\n\010clientip\030\001 "
  "\001(\t\022\022\n\nclientport\030\002 \001(\005\022\027\n\017failed_block_"
  "id\030\003 \001(\005\022\036\n\026failed_block_stripe_id\030\004 \001(\005"
  "\022\030\n\020failed_block_key\030\005 \001(\t\022\022\n\ndatanodeip"
  "\030\006 \003(\t\022\024\n\014datanodeport\030\007 \003(\005\022\021\n\tblockkey"
  "s\030\010 \003(\t\022\020\n\010blockids\030\t \003(\005\"\311\002\n\021DegradedRe"
  "adReply\022\032\n\022disk_io_start_time\030\001 \001(\001\022\030\n\020d"
  "isk_io_end_time\030\002 \001(\001\022\032\n\022network_start_t"
  "ime\030\003 \001(\001\022\030\n\020network_end_time\030\004 \001(\001\022\031\n\021d"
  "ecode_start_time\030\005 \001(\001\022\027\n\017decode_end_tim"
  "e\030\006 \001(\001\022\027\n\017cross_rack_time\030\007 \001(\001\022\033\n\023cros"
  "s_rack_xor_time\030\010 \001(\001\022\027\n\017grpc_start_time"
  "\030\t \001(\001\022\"\n\032data_node_grpc_notify_time\030\n \001"
  "(\001\022!\n\031data_node_grpc_start_time\030\013 \001(\001\"\274\002"
  "\n\017RecoveryRequest\022\030\n\020replaced_node_ip\030\001 "
  "\001(\t\022\032\n\022replaced_node_port\030\002 \001(\005\022\027\n\017faile"
  "d_block_id\030\003 \001(\005\022\030\n\020failed_block_key\030\004 \001"
  "(\t\022\026\n\016cross_rack_num\030\005 \001(\005\022\022\n\ndatanodeip"
  "\030\006 \003(\t\022\024\n\014datanodeport\030\007 \003(\005\022\021\n\tblockkey"
  "s\030\010 \003(\t\022\020\n\010blockids\030\t \003(\005\022\017\n\007proxyip\030\n \003"
  "(\t\022\021\n\tproxyport\030\013 \003(\005\022\033\n\023is_to_send_bloc"
  "k_id\030\014 \001(\010\022\030\n\020block_id_to_send\030\r \001(\005\"\271\002\n"
  "\027MultipleRecoveryRequest\022\030\n\020replaced_nod"
  "e_ip\030\001 \003(\t\022\032\n\022replaced_node_port\030\002 \003(\005\022\027"
  "\n\017failed_block_id\030\003 \003(\005\022\030\n\020failed_block_"
  "key\030\004 \003(\t\022\036\n\026failed_block_stripe_id\030\005 \003("
  "\005\022\026\n\016cross_rack_num\030\006 \003(\005\022\022\n\ndatanodeip\030"
  "\007 \003(\t\022\024\n\014datanodeport\030\010 \003(\005\022\021\n\tblockkeys"
  "\030\t \003(\t\022\020\n\010blockids\030\n \003(\005\022\024\n\014datanode_num"
  "\030\013 \003(\005\022\030\n\020failed_block_num\030\014 \001(\005\"\217\003\n\rRec"
  "overyReply\022\032\n\022disk_io_start_time\030\001 \001(\001\022\030"
  "\n\020disk_io_end_time\030\002 \001(\001\022\032\n\022network_star"
  "t_time\030\003 \001(\001\022\030\n\020network_end_time\030\004 \001(\001\022\031"
  "\n\021decode_start_time\030\005 \001(\001\022\027\n\017decode_end_"
  "time\030\006 \001(\001\022\027\n\017cross_rack_time\030\007 \001(\001\022\033\n\023c"
  "ross_rack_xor_time\030\010 \001(\001\022\027\n\017grpc_start_t"
  "ime\030\t \001(\001\022\"\n\032data_node_grpc_notify_time\030"
  "\n \001(\001\022!\n\031data_node_grpc_start_time\030\013 \001(\001"
  "\022#\n\033dest_data_node_network_time\030\014 \001(\001\022#\n"
  "\033dest_data_node_disk_io_time\030\r \001(\001\"\230\002\n\031A"
  "ppendStripeDataPlacement\022\013\n\003key\030\001 \001(\t\022\022\n"
  "\ncluster_id\030\002 \001(\005\022\021\n\tstripe_id\030\003 \001(\005\022\023\n\013"
  "append_size\030\004 \001(\004\022\022\n\ndatanodeip\030\005 \003(\t\022\024\n"
  "\014datanodeport\030\006 \003(\005\022\021\n\tblockkeys\030\007 \003(\t\022\020"
  "\n\010blockids\030\010 \003(\005\022\017\n\007offsets\030\t \003(\004\022\r\n\005siz"
  "es\030\n \003(\004\022\027\n\017is_merge_parity\030\013 \001(\010\022\023\n\013app"
  "end_mode\030\014 \001(\t\022\025\n\ris_serialized\030\r \001(\010\"\034\n"
  "\010SetReply\022\020\n\010ifcommit\030\001 \001(\010\"\036\n\010GetReply\022"
  "\022\n\ngetsuccess\030\001 \001(\010\"\261\001\n\021StripeAndBlockID"
  "s\022\021\n\tstripe_id\030\001 \001(\005\022\020\n\010group_id\030\002 \001(\005\022\020"
  "\n\010clientip\030\003 \001(\t\022\022\n\nclientport\030\004 \001(\005\022\021\n\t"
  "block_ids\030\005 \003(\005\022\022\n\nblock_keys\030\006 \003(\t\022\023\n\013d"
  "atanodeips\030\007 \003(\t\022\025\n\rdatanodeports\030\010 \003(\0052"
  "\231\006\n\014proxyService\022D\n\ncheckalive\022\032.proxy_p"
  "roto.CheckaliveCMD\032\032.proxy_proto.Request"
  "Result\022L\n\022decodeAndGetObject\022\037.proxy_pro"
  "to.ObjectAndPlacement\032\025.proxy_proto.GetR"
  "eply\022P\n\014degradedRead\022 .proxy_proto.Degra"
  "dedReadRequest\032\036.proxy_proto.DegradedRea"
  "dReply\022S\n\023degradedRead2Client\022\034.proxy_pr"
  "oto.RecoveryRequest\032\036.proxy_proto.Degrad"
  "edReadReply\022X\n\035degradedReadWithBlockStri"
  "peID\022 .proxy_proto.DegradedReadRequest\032\025"
  ".proxy_proto.GetReply\022D\n\010recovery\022\034.prox"
  "y_proto.RecoveryRequest\032\032.proxy_proto.Re"
  "coveryReply\022O\n\020multipleRecovery\022$.proxy_"
  "proto.MultipleRecoveryRequest\032\025.proxy_pr"
  "oto.GetReply\022\?\n\013deleteBlock\022\031.proxy_prot"
  "o.NodeAndBlock\032\025.proxy_proto.DelReply\022X\n"
  "\027scheduleAppend2Datanode\022&.proxy_proto.A"
  "ppendStripeDataPlacement\032\025.proxy_proto.S"
  "etReply\022B\n\tgetBlocks\022\036.proxy_proto.Strip"
  "eAndBlockIDs\032\025.proxy_proto.GetReplyb\006pro"
  "to3"
  ;
static ::_pbi::once_flag descriptor_table_proxy_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proxy_2eproto = {
    false, false, 4403, descriptor_table_protodef_proxy_2eproto,
    "proxy.proto",
    &descriptor_table_proxy_2eproto_once, nullptr, 0, 22,
    schemas, file_default_instances, TableStruct_proxy_2eproto::offsets,
    file_level_metadata_proxy_2eproto, file_level_enum_descriptors_proxy_2eproto,
    file_level_service_descriptors_proxy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proxy_2eproto_getter() {
  return &descriptor_table_proxy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proxy_2eproto(&descriptor_table_proxy_2eproto);
namespace proxy_proto {

// ===================================================================

class locationInfo::_Internal {
 public:
};

locationInfo::locationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.locationInfo)
}
locationInfo::locationInfo(const locationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  locationInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datanodeip_){from._impl_.datanodeip_}
    , decltype(_impl_.datanodeport_){from._impl_.datanodeport_}
    , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.blockkeys_){from._impl_.blockkeys_}
    , decltype(_impl_.blockids_){from._impl_.blockids_}
    , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
    , decltype(_impl_.proxy_ip_){}
    , decltype(_impl_.cluster_id_){}
    , decltype(_impl_.proxy_port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proxy_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proxy_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proxy_ip().empty()) {
    _this->_impl_.proxy_ip_.Set(from._internal_proxy_ip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cluster_id_, &from._impl_.cluster_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.proxy_port_) -
    reinterpret_cast<char*>(&_impl_.cluster_id_)) + sizeof(_impl_.proxy_port_));
  // @@protoc_insertion_point(copy_constructor:proxy_proto.locationInfo)
}

inline void locationInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datanodeip_){arena}
    , decltype(_impl_.datanodeport_){arena}
    , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.blockkeys_){arena}
    , decltype(_impl_.blockids_){arena}
    , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
    , decltype(_impl_.proxy_ip_){}
    , decltype(_impl_.cluster_id_){0}
    , decltype(_impl_.proxy_port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.proxy_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proxy_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

locationInfo::~locationInfo() {
  // @@protoc_insertion_point(destructor:proxy_proto.locationInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void locationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datanodeip_.~RepeatedPtrField();
  _impl_.datanodeport_.~RepeatedField();
  _impl_.blockkeys_.~RepeatedPtrField();
  _impl_.blockids_.~RepeatedField();
  _impl_.proxy_ip_.Destroy();
}

void locationInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void locationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.locationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datanodeip_.Clear();
  _impl_.datanodeport_.Clear();
  _impl_.blockkeys_.Clear();
  _impl_.blockids_.Clear();
  _impl_.proxy_ip_.ClearToEmpty();
  ::memset(&_impl_.cluster_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.proxy_port_) -
      reinterpret_cast<char*>(&_impl_.cluster_id_)) + sizeof(_impl_.proxy_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* locationInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cluster_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cluster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string proxy_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proxy_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.locationInfo.proxy_ip"));
        } else
          goto handle_unusual;
        continue;
      // int32 proxy_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.proxy_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string datanodeip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_datanodeip();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.locationInfo.datanodeip"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 datanodeport = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_datanodeport(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_datanodeport(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string blockkeys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blockkeys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.locationInfo.blockkeys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 blockids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_blockids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_blockids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* locationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.locationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cluster_id = 1;
  if (this->_internal_cluster_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cluster_id(), target);
  }

  // string proxy_ip = 2;
  if (!this->_internal_proxy_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proxy_ip().data(), static_cast<int>(this->_internal_proxy_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.locationInfo.proxy_ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_proxy_ip(), target);
  }

  // int32 proxy_port = 3;
  if (this->_internal_proxy_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_proxy_port(), target);
  }

  // repeated string datanodeip = 4;
  for (int i = 0, n = this->_internal_datanodeip_size(); i < n; i++) {
    const auto& s = this->_internal_datanodeip(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.locationInfo.datanodeip");
    target = stream->WriteString(4, s, target);
  }

  // repeated int32 datanodeport = 5;
  {
    int byte_size = _impl_._datanodeport_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_datanodeport(), byte_size, target);
    }
  }

  // repeated string blockkeys = 6;
  for (int i = 0, n = this->_internal_blockkeys_size(); i < n; i++) {
    const auto& s = this->_internal_blockkeys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.locationInfo.blockkeys");
    target = stream->WriteString(6, s, target);
  }

  // repeated int32 blockids = 7;
  {
    int byte_size = _impl_._blockids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_blockids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.locationInfo)
  return target;
}

size_t locationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.locationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string datanodeip = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.datanodeip_.size());
  for (int i = 0, n = _impl_.datanodeip_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.datanodeip_.Get(i));
  }

  // repeated int32 datanodeport = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.datanodeport_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._datanodeport_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string blockkeys = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.blockkeys_.size());
  for (int i = 0, n = _impl_.blockkeys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.blockkeys_.Get(i));
  }

  // repeated int32 blockids = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.blockids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._blockids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string proxy_ip = 2;
  if (!this->_internal_proxy_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proxy_ip());
  }

  // int32 cluster_id = 1;
  if (this->_internal_cluster_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cluster_id());
  }

  // int32 proxy_port = 3;
  if (this->_internal_proxy_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_proxy_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData locationInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    locationInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*locationInfo::GetClassData() const { return &_class_data_; }


void locationInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<locationInfo*>(&to_msg);
  auto& from = static_cast<const locationInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.locationInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datanodeip_.MergeFrom(from._impl_.datanodeip_);
  _this->_impl_.datanodeport_.MergeFrom(from._impl_.datanodeport_);
  _this->_impl_.blockkeys_.MergeFrom(from._impl_.blockkeys_);
  _this->_impl_.blockids_.MergeFrom(from._impl_.blockids_);
  if (!from._internal_proxy_ip().empty()) {
    _this->_internal_set_proxy_ip(from._internal_proxy_ip());
  }
  if (from._internal_cluster_id() != 0) {
    _this->_internal_set_cluster_id(from._internal_cluster_id());
  }
  if (from._internal_proxy_port() != 0) {
    _this->_internal_set_proxy_port(from._internal_proxy_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void locationInfo::CopyFrom(const locationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.locationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool locationInfo::IsInitialized() const {
  return true;
}

void locationInfo::InternalSwap(locationInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datanodeip_.InternalSwap(&other->_impl_.datanodeip_);
  _impl_.datanodeport_.InternalSwap(&other->_impl_.datanodeport_);
  _impl_.blockkeys_.InternalSwap(&other->_impl_.blockkeys_);
  _impl_.blockids_.InternalSwap(&other->_impl_.blockids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proxy_ip_, lhs_arena,
      &other->_impl_.proxy_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(locationInfo, _impl_.proxy_port_)
      + sizeof(locationInfo::_impl_.proxy_port_)
      - PROTOBUF_FIELD_OFFSET(locationInfo, _impl_.cluster_id_)>(
          reinterpret_cast<char*>(&_impl_.cluster_id_),
          reinterpret_cast<char*>(&other->_impl_.cluster_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata locationInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[0]);
}

// ===================================================================

class mainRecalPlan::_Internal {
 public:
};

mainRecalPlan::mainRecalPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.mainRecalPlan)
}
mainRecalPlan::mainRecalPlan(const mainRecalPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  mainRecalPlan* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clusters_){from._impl_.clusters_}
    , decltype(_impl_.p_datanodeip_){from._impl_.p_datanodeip_}
    , decltype(_impl_.p_datanodeport_){from._impl_.p_datanodeport_}
    , /*decltype(_impl_._p_datanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.p_blockkeys_){from._impl_.p_blockkeys_}
    , decltype(_impl_.type_){}
    , decltype(_impl_.if_partial_decoding_){}
    , decltype(_impl_.k_){}
    , decltype(_impl_.l_){}
    , decltype(_impl_.g_m_){}
    , decltype(_impl_.block_size_){}
    , decltype(_impl_.encodetype_){}
    , decltype(_impl_.stripe_id_){}
    , decltype(_impl_.group_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_id_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.group_id_));
  // @@protoc_insertion_point(copy_constructor:proxy_proto.mainRecalPlan)
}

inline void mainRecalPlan::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clusters_){arena}
    , decltype(_impl_.p_datanodeip_){arena}
    , decltype(_impl_.p_datanodeport_){arena}
    , /*decltype(_impl_._p_datanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.p_blockkeys_){arena}
    , decltype(_impl_.type_){false}
    , decltype(_impl_.if_partial_decoding_){false}
    , decltype(_impl_.k_){0}
    , decltype(_impl_.l_){0}
    , decltype(_impl_.g_m_){0}
    , decltype(_impl_.block_size_){0}
    , decltype(_impl_.encodetype_){0}
    , decltype(_impl_.stripe_id_){0}
    , decltype(_impl_.group_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

mainRecalPlan::~mainRecalPlan() {
  // @@protoc_insertion_point(destructor:proxy_proto.mainRecalPlan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void mainRecalPlan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clusters_.~RepeatedPtrField();
  _impl_.p_datanodeip_.~RepeatedPtrField();
  _impl_.p_datanodeport_.~RepeatedField();
  _impl_.p_blockkeys_.~RepeatedPtrField();
}

void mainRecalPlan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void mainRecalPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.mainRecalPlan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clusters_.Clear();
  _impl_.p_datanodeip_.Clear();
  _impl_.p_datanodeport_.Clear();
  _impl_.p_blockkeys_.Clear();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.group_id_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.group_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* mainRecalPlan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool if_partial_decoding = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.if_partial_decoding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proxy_proto.locationInfo clusters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clusters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string p_datanodeip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_p_datanodeip();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.mainRecalPlan.p_datanodeip"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 p_datanodeport = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_p_datanodeport(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_p_datanodeport(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string p_blockkeys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_p_blockkeys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.mainRecalPlan.p_blockkeys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 k = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 l = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 g_m = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.g_m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 block_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 encodetype = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.encodetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stripe_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.stripe_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 group_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* mainRecalPlan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.mainRecalPlan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_type(), target);
  }

  // bool if_partial_decoding = 2;
  if (this->_internal_if_partial_decoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_if_partial_decoding(), target);
  }

  // repeated .proxy_proto.locationInfo clusters = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_clusters_size()); i < n; i++) {
    const auto& repfield = this->_internal_clusters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string p_datanodeip = 4;
  for (int i = 0, n = this->_internal_p_datanodeip_size(); i < n; i++) {
    const auto& s = this->_internal_p_datanodeip(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.mainRecalPlan.p_datanodeip");
    target = stream->WriteString(4, s, target);
  }

  // repeated int32 p_datanodeport = 5;
  {
    int byte_size = _impl_._p_datanodeport_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_p_datanodeport(), byte_size, target);
    }
  }

  // repeated string p_blockkeys = 6;
  for (int i = 0, n = this->_internal_p_blockkeys_size(); i < n; i++) {
    const auto& s = this->_internal_p_blockkeys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.mainRecalPlan.p_blockkeys");
    target = stream->WriteString(6, s, target);
  }

  // int32 k = 7;
  if (this->_internal_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_k(), target);
  }

  // int32 l = 8;
  if (this->_internal_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_l(), target);
  }

  // int32 g_m = 9;
  if (this->_internal_g_m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_g_m(), target);
  }

  // int32 block_size = 10;
  if (this->_internal_block_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_block_size(), target);
  }

  // int32 encodetype = 11;
  if (this->_internal_encodetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_encodetype(), target);
  }

  // int32 stripe_id = 12;
  if (this->_internal_stripe_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_stripe_id(), target);
  }

  // int32 group_id = 13;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.mainRecalPlan)
  return target;
}

size_t mainRecalPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.mainRecalPlan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proxy_proto.locationInfo clusters = 3;
  total_size += 1UL * this->_internal_clusters_size();
  for (const auto& msg : this->_impl_.clusters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string p_datanodeip = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.p_datanodeip_.size());
  for (int i = 0, n = _impl_.p_datanodeip_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.p_datanodeip_.Get(i));
  }

  // repeated int32 p_datanodeport = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.p_datanodeport_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._p_datanodeport_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string p_blockkeys = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.p_blockkeys_.size());
  for (int i = 0, n = _impl_.p_blockkeys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.p_blockkeys_.Get(i));
  }

  // bool type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 + 1;
  }

  // bool if_partial_decoding = 2;
  if (this->_internal_if_partial_decoding() != 0) {
    total_size += 1 + 1;
  }

  // int32 k = 7;
  if (this->_internal_k() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_k());
  }

  // int32 l = 8;
  if (this->_internal_l() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_l());
  }

  // int32 g_m = 9;
  if (this->_internal_g_m() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_g_m());
  }

  // int32 block_size = 10;
  if (this->_internal_block_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_block_size());
  }

  // int32 encodetype = 11;
  if (this->_internal_encodetype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_encodetype());
  }

  // int32 stripe_id = 12;
  if (this->_internal_stripe_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stripe_id());
  }

  // int32 group_id = 13;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_group_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData mainRecalPlan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    mainRecalPlan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*mainRecalPlan::GetClassData() const { return &_class_data_; }


void mainRecalPlan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<mainRecalPlan*>(&to_msg);
  auto& from = static_cast<const mainRecalPlan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.mainRecalPlan)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.clusters_.MergeFrom(from._impl_.clusters_);
  _this->_impl_.p_datanodeip_.MergeFrom(from._impl_.p_datanodeip_);
  _this->_impl_.p_datanodeport_.MergeFrom(from._impl_.p_datanodeport_);
  _this->_impl_.p_blockkeys_.MergeFrom(from._impl_.p_blockkeys_);
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_if_partial_decoding() != 0) {
    _this->_internal_set_if_partial_decoding(from._internal_if_partial_decoding());
  }
  if (from._internal_k() != 0) {
    _this->_internal_set_k(from._internal_k());
  }
  if (from._internal_l() != 0) {
    _this->_internal_set_l(from._internal_l());
  }
  if (from._internal_g_m() != 0) {
    _this->_internal_set_g_m(from._internal_g_m());
  }
  if (from._internal_block_size() != 0) {
    _this->_internal_set_block_size(from._internal_block_size());
  }
  if (from._internal_encodetype() != 0) {
    _this->_internal_set_encodetype(from._internal_encodetype());
  }
  if (from._internal_stripe_id() != 0) {
    _this->_internal_set_stripe_id(from._internal_stripe_id());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void mainRecalPlan::CopyFrom(const mainRecalPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.mainRecalPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mainRecalPlan::IsInitialized() const {
  return true;
}

void mainRecalPlan::InternalSwap(mainRecalPlan* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.clusters_.InternalSwap(&other->_impl_.clusters_);
  _impl_.p_datanodeip_.InternalSwap(&other->_impl_.p_datanodeip_);
  _impl_.p_datanodeport_.InternalSwap(&other->_impl_.p_datanodeport_);
  _impl_.p_blockkeys_.InternalSwap(&other->_impl_.p_blockkeys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(mainRecalPlan, _impl_.group_id_)
      + sizeof(mainRecalPlan::_impl_.group_id_)
      - PROTOBUF_FIELD_OFFSET(mainRecalPlan, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata mainRecalPlan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[1]);
}

// ===================================================================

class RecalReply::_Internal {
 public:
};

RecalReply::RecalReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.RecalReply)
}
RecalReply::RecalReply(const RecalReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecalReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    _this->_impl_.result_.Set(from._internal_result(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proxy_proto.RecalReply)
}

inline void RecalReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RecalReply::~RecalReply() {
  // @@protoc_insertion_point(destructor:proxy_proto.RecalReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecalReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.Destroy();
}

void RecalReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecalReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.RecalReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecalReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.RecalReply.result"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecalReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.RecalReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string result = 1;
  if (!this->_internal_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.RecalReply.result");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.RecalReply)
  return target;
}

size_t RecalReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.RecalReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 1;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecalReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecalReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecalReply::GetClassData() const { return &_class_data_; }


void RecalReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecalReply*>(&to_msg);
  auto& from = static_cast<const RecalReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.RecalReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecalReply::CopyFrom(const RecalReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.RecalReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecalReply::IsInitialized() const {
  return true;
}

void RecalReply::InternalSwap(RecalReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_, lhs_arena,
      &other->_impl_.result_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RecalReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[2]);
}

// ===================================================================

class helpRecalPlan::_Internal {
 public:
};

helpRecalPlan::helpRecalPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.helpRecalPlan)
}
helpRecalPlan::helpRecalPlan(const helpRecalPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  helpRecalPlan* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datanodeip_){from._impl_.datanodeip_}
    , decltype(_impl_.datanodeport_){from._impl_.datanodeport_}
    , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.blockkeys_){from._impl_.blockkeys_}
    , decltype(_impl_.blockids_){from._impl_.blockids_}
    , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
    , decltype(_impl_.mainproxyip_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.if_partial_decoding_){}
    , decltype(_impl_.mainproxyport_){}
    , decltype(_impl_.block_size_){}
    , decltype(_impl_.parity_num_){}
    , decltype(_impl_.k_){}
    , decltype(_impl_.encodetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mainproxyip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mainproxyip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mainproxyip().empty()) {
    _this->_impl_.mainproxyip_.Set(from._internal_mainproxyip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.encodetype_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.encodetype_));
  // @@protoc_insertion_point(copy_constructor:proxy_proto.helpRecalPlan)
}

inline void helpRecalPlan::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datanodeip_){arena}
    , decltype(_impl_.datanodeport_){arena}
    , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.blockkeys_){arena}
    , decltype(_impl_.blockids_){arena}
    , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
    , decltype(_impl_.mainproxyip_){}
    , decltype(_impl_.type_){false}
    , decltype(_impl_.if_partial_decoding_){false}
    , decltype(_impl_.mainproxyport_){0}
    , decltype(_impl_.block_size_){0}
    , decltype(_impl_.parity_num_){0}
    , decltype(_impl_.k_){0}
    , decltype(_impl_.encodetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mainproxyip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mainproxyip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

helpRecalPlan::~helpRecalPlan() {
  // @@protoc_insertion_point(destructor:proxy_proto.helpRecalPlan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void helpRecalPlan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datanodeip_.~RepeatedPtrField();
  _impl_.datanodeport_.~RepeatedField();
  _impl_.blockkeys_.~RepeatedPtrField();
  _impl_.blockids_.~RepeatedField();
  _impl_.mainproxyip_.Destroy();
}

void helpRecalPlan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void helpRecalPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.helpRecalPlan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datanodeip_.Clear();
  _impl_.datanodeport_.Clear();
  _impl_.blockkeys_.Clear();
  _impl_.blockids_.Clear();
  _impl_.mainproxyip_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.encodetype_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.encodetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* helpRecalPlan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool if_partial_decoding = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.if_partial_decoding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mainproxyip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mainproxyip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.helpRecalPlan.mainproxyip"));
        } else
          goto handle_unusual;
        continue;
      // int32 mainproxyport = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.mainproxyport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string datanodeip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_datanodeip();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.helpRecalPlan.datanodeip"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 datanodeport = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_datanodeport(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_datanodeport(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string blockkeys = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blockkeys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.helpRecalPlan.blockkeys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 block_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 blockids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_blockids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_blockids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 parity_num = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.parity_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 k = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 encodetype = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.encodetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* helpRecalPlan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.helpRecalPlan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_type(), target);
  }

  // bool if_partial_decoding = 2;
  if (this->_internal_if_partial_decoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_if_partial_decoding(), target);
  }

  // string mainproxyip = 3;
  if (!this->_internal_mainproxyip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mainproxyip().data(), static_cast<int>(this->_internal_mainproxyip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.helpRecalPlan.mainproxyip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mainproxyip(), target);
  }

  // int32 mainproxyport = 4;
  if (this->_internal_mainproxyport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_mainproxyport(), target);
  }

  // repeated string datanodeip = 5;
  for (int i = 0, n = this->_internal_datanodeip_size(); i < n; i++) {
    const auto& s = this->_internal_datanodeip(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.helpRecalPlan.datanodeip");
    target = stream->WriteString(5, s, target);
  }

  // repeated int32 datanodeport = 6;
  {
    int byte_size = _impl_._datanodeport_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_datanodeport(), byte_size, target);
    }
  }

  // repeated string blockkeys = 7;
  for (int i = 0, n = this->_internal_blockkeys_size(); i < n; i++) {
    const auto& s = this->_internal_blockkeys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.helpRecalPlan.blockkeys");
    target = stream->WriteString(7, s, target);
  }

  // int32 block_size = 8;
  if (this->_internal_block_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_block_size(), target);
  }

  // repeated int32 blockids = 9;
  {
    int byte_size = _impl_._blockids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_blockids(), byte_size, target);
    }
  }

  // int32 parity_num = 10;
  if (this->_internal_parity_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_parity_num(), target);
  }

  // int32 k = 11;
  if (this->_internal_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_k(), target);
  }

  // int32 encodetype = 12;
  if (this->_internal_encodetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_encodetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.helpRecalPlan)
  return target;
}

size_t helpRecalPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.helpRecalPlan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string datanodeip = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.datanodeip_.size());
  for (int i = 0, n = _impl_.datanodeip_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.datanodeip_.Get(i));
  }

  // repeated int32 datanodeport = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.datanodeport_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._datanodeport_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string blockkeys = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.blockkeys_.size());
  for (int i = 0, n = _impl_.blockkeys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.blockkeys_.Get(i));
  }

  // repeated int32 blockids = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.blockids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._blockids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string mainproxyip = 3;
  if (!this->_internal_mainproxyip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mainproxyip());
  }

  // bool type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 + 1;
  }

  // bool if_partial_decoding = 2;
  if (this->_internal_if_partial_decoding() != 0) {
    total_size += 1 + 1;
  }

  // int32 mainproxyport = 4;
  if (this->_internal_mainproxyport() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mainproxyport());
  }

  // int32 block_size = 8;
  if (this->_internal_block_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_block_size());
  }

  // int32 parity_num = 10;
  if (this->_internal_parity_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_parity_num());
  }

  // int32 k = 11;
  if (this->_internal_k() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_k());
  }

  // int32 encodetype = 12;
  if (this->_internal_encodetype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_encodetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData helpRecalPlan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    helpRecalPlan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*helpRecalPlan::GetClassData() const { return &_class_data_; }


void helpRecalPlan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<helpRecalPlan*>(&to_msg);
  auto& from = static_cast<const helpRecalPlan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.helpRecalPlan)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datanodeip_.MergeFrom(from._impl_.datanodeip_);
  _this->_impl_.datanodeport_.MergeFrom(from._impl_.datanodeport_);
  _this->_impl_.blockkeys_.MergeFrom(from._impl_.blockkeys_);
  _this->_impl_.blockids_.MergeFrom(from._impl_.blockids_);
  if (!from._internal_mainproxyip().empty()) {
    _this->_internal_set_mainproxyip(from._internal_mainproxyip());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_if_partial_decoding() != 0) {
    _this->_internal_set_if_partial_decoding(from._internal_if_partial_decoding());
  }
  if (from._internal_mainproxyport() != 0) {
    _this->_internal_set_mainproxyport(from._internal_mainproxyport());
  }
  if (from._internal_block_size() != 0) {
    _this->_internal_set_block_size(from._internal_block_size());
  }
  if (from._internal_parity_num() != 0) {
    _this->_internal_set_parity_num(from._internal_parity_num());
  }
  if (from._internal_k() != 0) {
    _this->_internal_set_k(from._internal_k());
  }
  if (from._internal_encodetype() != 0) {
    _this->_internal_set_encodetype(from._internal_encodetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void helpRecalPlan::CopyFrom(const helpRecalPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.helpRecalPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool helpRecalPlan::IsInitialized() const {
  return true;
}

void helpRecalPlan::InternalSwap(helpRecalPlan* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datanodeip_.InternalSwap(&other->_impl_.datanodeip_);
  _impl_.datanodeport_.InternalSwap(&other->_impl_.datanodeport_);
  _impl_.blockkeys_.InternalSwap(&other->_impl_.blockkeys_);
  _impl_.blockids_.InternalSwap(&other->_impl_.blockids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mainproxyip_, lhs_arena,
      &other->_impl_.mainproxyip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(helpRecalPlan, _impl_.encodetype_)
      + sizeof(helpRecalPlan::_impl_.encodetype_)
      - PROTOBUF_FIELD_OFFSET(helpRecalPlan, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata helpRecalPlan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[3]);
}

// ===================================================================

class blockRelocPlan::_Internal {
 public:
};

blockRelocPlan::blockRelocPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.blockRelocPlan)
}
blockRelocPlan::blockRelocPlan(const blockRelocPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  blockRelocPlan* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blocktomove_){from._impl_.blocktomove_}
    , decltype(_impl_.fromdatanodeip_){from._impl_.fromdatanodeip_}
    , decltype(_impl_.fromdatanodeport_){from._impl_.fromdatanodeport_}
    , /*decltype(_impl_._fromdatanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.todatanodeip_){from._impl_.todatanodeip_}
    , decltype(_impl_.todatanodeport_){from._impl_.todatanodeport_}
    , /*decltype(_impl_._todatanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.block_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.block_size_ = from._impl_.block_size_;
  // @@protoc_insertion_point(copy_constructor:proxy_proto.blockRelocPlan)
}

inline void blockRelocPlan::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blocktomove_){arena}
    , decltype(_impl_.fromdatanodeip_){arena}
    , decltype(_impl_.fromdatanodeport_){arena}
    , /*decltype(_impl_._fromdatanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.todatanodeip_){arena}
    , decltype(_impl_.todatanodeport_){arena}
    , /*decltype(_impl_._todatanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.block_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

blockRelocPlan::~blockRelocPlan() {
  // @@protoc_insertion_point(destructor:proxy_proto.blockRelocPlan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void blockRelocPlan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blocktomove_.~RepeatedPtrField();
  _impl_.fromdatanodeip_.~RepeatedPtrField();
  _impl_.fromdatanodeport_.~RepeatedField();
  _impl_.todatanodeip_.~RepeatedPtrField();
  _impl_.todatanodeport_.~RepeatedField();
}

void blockRelocPlan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void blockRelocPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.blockRelocPlan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blocktomove_.Clear();
  _impl_.fromdatanodeip_.Clear();
  _impl_.fromdatanodeport_.Clear();
  _impl_.todatanodeip_.Clear();
  _impl_.todatanodeport_.Clear();
  _impl_.block_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* blockRelocPlan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string blocktomove = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blocktomove();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.blockRelocPlan.blocktomove"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string fromdatanodeip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_fromdatanodeip();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.blockRelocPlan.fromdatanodeip"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 fromdatanodeport = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_fromdatanodeport(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_fromdatanodeport(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string todatanodeip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_todatanodeip();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.blockRelocPlan.todatanodeip"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 todatanodeport = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_todatanodeport(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_todatanodeport(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 block_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* blockRelocPlan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.blockRelocPlan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string blocktomove = 1;
  for (int i = 0, n = this->_internal_blocktomove_size(); i < n; i++) {
    const auto& s = this->_internal_blocktomove(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.blockRelocPlan.blocktomove");
    target = stream->WriteString(1, s, target);
  }

  // repeated string fromdatanodeip = 2;
  for (int i = 0, n = this->_internal_fromdatanodeip_size(); i < n; i++) {
    const auto& s = this->_internal_fromdatanodeip(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.blockRelocPlan.fromdatanodeip");
    target = stream->WriteString(2, s, target);
  }

  // repeated int32 fromdatanodeport = 3;
  {
    int byte_size = _impl_._fromdatanodeport_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_fromdatanodeport(), byte_size, target);
    }
  }

  // repeated string todatanodeip = 4;
  for (int i = 0, n = this->_internal_todatanodeip_size(); i < n; i++) {
    const auto& s = this->_internal_todatanodeip(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.blockRelocPlan.todatanodeip");
    target = stream->WriteString(4, s, target);
  }

  // repeated int32 todatanodeport = 5;
  {
    int byte_size = _impl_._todatanodeport_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_todatanodeport(), byte_size, target);
    }
  }

  // int32 block_size = 6;
  if (this->_internal_block_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_block_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.blockRelocPlan)
  return target;
}

size_t blockRelocPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.blockRelocPlan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string blocktomove = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.blocktomove_.size());
  for (int i = 0, n = _impl_.blocktomove_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.blocktomove_.Get(i));
  }

  // repeated string fromdatanodeip = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.fromdatanodeip_.size());
  for (int i = 0, n = _impl_.fromdatanodeip_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.fromdatanodeip_.Get(i));
  }

  // repeated int32 fromdatanodeport = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.fromdatanodeport_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._fromdatanodeport_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string todatanodeip = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.todatanodeip_.size());
  for (int i = 0, n = _impl_.todatanodeip_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.todatanodeip_.Get(i));
  }

  // repeated int32 todatanodeport = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.todatanodeport_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._todatanodeport_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 block_size = 6;
  if (this->_internal_block_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_block_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData blockRelocPlan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    blockRelocPlan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*blockRelocPlan::GetClassData() const { return &_class_data_; }


void blockRelocPlan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<blockRelocPlan*>(&to_msg);
  auto& from = static_cast<const blockRelocPlan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.blockRelocPlan)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blocktomove_.MergeFrom(from._impl_.blocktomove_);
  _this->_impl_.fromdatanodeip_.MergeFrom(from._impl_.fromdatanodeip_);
  _this->_impl_.fromdatanodeport_.MergeFrom(from._impl_.fromdatanodeport_);
  _this->_impl_.todatanodeip_.MergeFrom(from._impl_.todatanodeip_);
  _this->_impl_.todatanodeport_.MergeFrom(from._impl_.todatanodeport_);
  if (from._internal_block_size() != 0) {
    _this->_internal_set_block_size(from._internal_block_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void blockRelocPlan::CopyFrom(const blockRelocPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.blockRelocPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blockRelocPlan::IsInitialized() const {
  return true;
}

void blockRelocPlan::InternalSwap(blockRelocPlan* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blocktomove_.InternalSwap(&other->_impl_.blocktomove_);
  _impl_.fromdatanodeip_.InternalSwap(&other->_impl_.fromdatanodeip_);
  _impl_.fromdatanodeport_.InternalSwap(&other->_impl_.fromdatanodeport_);
  _impl_.todatanodeip_.InternalSwap(&other->_impl_.todatanodeip_);
  _impl_.todatanodeport_.InternalSwap(&other->_impl_.todatanodeport_);
  swap(_impl_.block_size_, other->_impl_.block_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata blockRelocPlan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[4]);
}

// ===================================================================

class blockRelocReply::_Internal {
 public:
};

blockRelocReply::blockRelocReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.blockRelocReply)
}
blockRelocReply::blockRelocReply(const blockRelocReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  blockRelocReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    _this->_impl_.result_.Set(from._internal_result(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proxy_proto.blockRelocReply)
}

inline void blockRelocReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

blockRelocReply::~blockRelocReply() {
  // @@protoc_insertion_point(destructor:proxy_proto.blockRelocReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void blockRelocReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.Destroy();
}

void blockRelocReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void blockRelocReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.blockRelocReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* blockRelocReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.blockRelocReply.result"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* blockRelocReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.blockRelocReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string result = 1;
  if (!this->_internal_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.blockRelocReply.result");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.blockRelocReply)
  return target;
}

size_t blockRelocReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.blockRelocReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 1;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData blockRelocReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    blockRelocReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*blockRelocReply::GetClassData() const { return &_class_data_; }


void blockRelocReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<blockRelocReply*>(&to_msg);
  auto& from = static_cast<const blockRelocReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.blockRelocReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_result().empty()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void blockRelocReply::CopyFrom(const blockRelocReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.blockRelocReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool blockRelocReply::IsInitialized() const {
  return true;
}

void blockRelocReply::InternalSwap(blockRelocReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_, lhs_arena,
      &other->_impl_.result_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata blockRelocReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[5]);
}

// ===================================================================

class AskIfSuccess::_Internal {
 public:
};

AskIfSuccess::AskIfSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.AskIfSuccess)
}
AskIfSuccess::AskIfSuccess(const AskIfSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AskIfSuccess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.step_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.step_ = from._impl_.step_;
  // @@protoc_insertion_point(copy_constructor:proxy_proto.AskIfSuccess)
}

inline void AskIfSuccess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.step_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AskIfSuccess::~AskIfSuccess() {
  // @@protoc_insertion_point(destructor:proxy_proto.AskIfSuccess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AskIfSuccess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AskIfSuccess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AskIfSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.AskIfSuccess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.step_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AskIfSuccess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 step = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AskIfSuccess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.AskIfSuccess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 step = 1;
  if (this->_internal_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_step(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.AskIfSuccess)
  return target;
}

size_t AskIfSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.AskIfSuccess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 step = 1;
  if (this->_internal_step() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_step());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AskIfSuccess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AskIfSuccess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AskIfSuccess::GetClassData() const { return &_class_data_; }


void AskIfSuccess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AskIfSuccess*>(&to_msg);
  auto& from = static_cast<const AskIfSuccess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.AskIfSuccess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_step() != 0) {
    _this->_internal_set_step(from._internal_step());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AskIfSuccess::CopyFrom(const AskIfSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.AskIfSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskIfSuccess::IsInitialized() const {
  return true;
}

void AskIfSuccess::InternalSwap(AskIfSuccess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.step_, other->_impl_.step_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AskIfSuccess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[6]);
}

// ===================================================================

class RepIfSuccess::_Internal {
 public:
};

RepIfSuccess::RepIfSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.RepIfSuccess)
}
RepIfSuccess::RepIfSuccess(const RepIfSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RepIfSuccess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ifsuccess_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ifsuccess_ = from._impl_.ifsuccess_;
  // @@protoc_insertion_point(copy_constructor:proxy_proto.RepIfSuccess)
}

inline void RepIfSuccess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ifsuccess_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RepIfSuccess::~RepIfSuccess() {
  // @@protoc_insertion_point(destructor:proxy_proto.RepIfSuccess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RepIfSuccess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RepIfSuccess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RepIfSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.RepIfSuccess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ifsuccess_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RepIfSuccess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ifsuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ifsuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RepIfSuccess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.RepIfSuccess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ifsuccess = 1;
  if (this->_internal_ifsuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ifsuccess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.RepIfSuccess)
  return target;
}

size_t RepIfSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.RepIfSuccess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ifsuccess = 1;
  if (this->_internal_ifsuccess() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RepIfSuccess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RepIfSuccess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RepIfSuccess::GetClassData() const { return &_class_data_; }


void RepIfSuccess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RepIfSuccess*>(&to_msg);
  auto& from = static_cast<const RepIfSuccess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.RepIfSuccess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ifsuccess() != 0) {
    _this->_internal_set_ifsuccess(from._internal_ifsuccess());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RepIfSuccess::CopyFrom(const RepIfSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.RepIfSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RepIfSuccess::IsInitialized() const {
  return true;
}

void RepIfSuccess::InternalSwap(RepIfSuccess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ifsuccess_, other->_impl_.ifsuccess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RepIfSuccess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[7]);
}

// ===================================================================

class NodeAndBlock::_Internal {
 public:
};

NodeAndBlock::NodeAndBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.NodeAndBlock)
}
NodeAndBlock::NodeAndBlock(const NodeAndBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NodeAndBlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.blockkeys_){from._impl_.blockkeys_}
    , decltype(_impl_.datanodeip_){from._impl_.datanodeip_}
    , decltype(_impl_.datanodeport_){from._impl_.datanodeport_}
    , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.key_){}
    , decltype(_impl_.stripe_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.stripe_id_ = from._impl_.stripe_id_;
  // @@protoc_insertion_point(copy_constructor:proxy_proto.NodeAndBlock)
}

inline void NodeAndBlock::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.blockkeys_){arena}
    , decltype(_impl_.datanodeip_){arena}
    , decltype(_impl_.datanodeport_){arena}
    , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.key_){}
    , decltype(_impl_.stripe_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NodeAndBlock::~NodeAndBlock() {
  // @@protoc_insertion_point(destructor:proxy_proto.NodeAndBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NodeAndBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.blockkeys_.~RepeatedPtrField();
  _impl_.datanodeip_.~RepeatedPtrField();
  _impl_.datanodeport_.~RepeatedField();
  _impl_.key_.Destroy();
}

void NodeAndBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NodeAndBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.NodeAndBlock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blockkeys_.Clear();
  _impl_.datanodeip_.Clear();
  _impl_.datanodeport_.Clear();
  _impl_.key_.ClearToEmpty();
  _impl_.stripe_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeAndBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string blockkeys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blockkeys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.NodeAndBlock.blockkeys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string datanodeip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_datanodeip();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.NodeAndBlock.datanodeip"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 datanodeport = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_datanodeport(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_datanodeport(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stripe_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.stripe_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.NodeAndBlock.key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NodeAndBlock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.NodeAndBlock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string blockkeys = 1;
  for (int i = 0, n = this->_internal_blockkeys_size(); i < n; i++) {
    const auto& s = this->_internal_blockkeys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.NodeAndBlock.blockkeys");
    target = stream->WriteString(1, s, target);
  }

  // repeated string datanodeip = 2;
  for (int i = 0, n = this->_internal_datanodeip_size(); i < n; i++) {
    const auto& s = this->_internal_datanodeip(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.NodeAndBlock.datanodeip");
    target = stream->WriteString(2, s, target);
  }

  // repeated int32 datanodeport = 3;
  {
    int byte_size = _impl_._datanodeport_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_datanodeport(), byte_size, target);
    }
  }

  // int32 stripe_id = 4;
  if (this->_internal_stripe_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_stripe_id(), target);
  }

  // string key = 5;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.NodeAndBlock.key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.NodeAndBlock)
  return target;
}

size_t NodeAndBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.NodeAndBlock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string blockkeys = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.blockkeys_.size());
  for (int i = 0, n = _impl_.blockkeys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.blockkeys_.Get(i));
  }

  // repeated string datanodeip = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.datanodeip_.size());
  for (int i = 0, n = _impl_.datanodeip_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.datanodeip_.Get(i));
  }

  // repeated int32 datanodeport = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.datanodeport_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._datanodeport_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string key = 5;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int32 stripe_id = 4;
  if (this->_internal_stripe_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stripe_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NodeAndBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NodeAndBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NodeAndBlock::GetClassData() const { return &_class_data_; }


void NodeAndBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NodeAndBlock*>(&to_msg);
  auto& from = static_cast<const NodeAndBlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.NodeAndBlock)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.blockkeys_.MergeFrom(from._impl_.blockkeys_);
  _this->_impl_.datanodeip_.MergeFrom(from._impl_.datanodeip_);
  _this->_impl_.datanodeport_.MergeFrom(from._impl_.datanodeport_);
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_stripe_id() != 0) {
    _this->_internal_set_stripe_id(from._internal_stripe_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NodeAndBlock::CopyFrom(const NodeAndBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.NodeAndBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeAndBlock::IsInitialized() const {
  return true;
}

void NodeAndBlock::InternalSwap(NodeAndBlock* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blockkeys_.InternalSwap(&other->_impl_.blockkeys_);
  _impl_.datanodeip_.InternalSwap(&other->_impl_.datanodeip_);
  _impl_.datanodeport_.InternalSwap(&other->_impl_.datanodeport_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.stripe_id_, other->_impl_.stripe_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeAndBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[8]);
}

// ===================================================================

class DelReply::_Internal {
 public:
};

DelReply::DelReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.DelReply)
}
DelReply::DelReply(const DelReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DelReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ifcommit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ifcommit_ = from._impl_.ifcommit_;
  // @@protoc_insertion_point(copy_constructor:proxy_proto.DelReply)
}

inline void DelReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ifcommit_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DelReply::~DelReply() {
  // @@protoc_insertion_point(destructor:proxy_proto.DelReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DelReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DelReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DelReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.DelReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ifcommit_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ifcommit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ifcommit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DelReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.DelReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ifcommit = 1;
  if (this->_internal_ifcommit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ifcommit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.DelReply)
  return target;
}

size_t DelReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.DelReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ifcommit = 1;
  if (this->_internal_ifcommit() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DelReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelReply::GetClassData() const { return &_class_data_; }


void DelReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DelReply*>(&to_msg);
  auto& from = static_cast<const DelReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.DelReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ifcommit() != 0) {
    _this->_internal_set_ifcommit(from._internal_ifcommit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelReply::CopyFrom(const DelReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.DelReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelReply::IsInitialized() const {
  return true;
}

void DelReply::InternalSwap(DelReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ifcommit_, other->_impl_.ifcommit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[9]);
}

// ===================================================================

class CheckaliveCMD::_Internal {
 public:
};

CheckaliveCMD::CheckaliveCMD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.CheckaliveCMD)
}
CheckaliveCMD::CheckaliveCMD(const CheckaliveCMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckaliveCMD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proxy_proto.CheckaliveCMD)
}

inline void CheckaliveCMD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CheckaliveCMD::~CheckaliveCMD() {
  // @@protoc_insertion_point(destructor:proxy_proto.CheckaliveCMD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckaliveCMD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CheckaliveCMD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckaliveCMD::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.CheckaliveCMD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckaliveCMD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.CheckaliveCMD.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckaliveCMD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.CheckaliveCMD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.CheckaliveCMD.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.CheckaliveCMD)
  return target;
}

size_t CheckaliveCMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.CheckaliveCMD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckaliveCMD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckaliveCMD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckaliveCMD::GetClassData() const { return &_class_data_; }


void CheckaliveCMD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckaliveCMD*>(&to_msg);
  auto& from = static_cast<const CheckaliveCMD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.CheckaliveCMD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckaliveCMD::CopyFrom(const CheckaliveCMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.CheckaliveCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckaliveCMD::IsInitialized() const {
  return true;
}

void CheckaliveCMD::InternalSwap(CheckaliveCMD* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckaliveCMD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[10]);
}

// ===================================================================

class RequestResult::_Internal {
 public:
};

RequestResult::RequestResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.RequestResult)
}
RequestResult::RequestResult(const RequestResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.message_ = from._impl_.message_;
  // @@protoc_insertion_point(copy_constructor:proxy_proto.RequestResult)
}

inline void RequestResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RequestResult::~RequestResult() {
  // @@protoc_insertion_point(destructor:proxy_proto.RequestResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.RequestResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.RequestResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool message = 1;
  if (this->_internal_message() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.RequestResult)
  return target;
}

size_t RequestResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.RequestResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool message = 1;
  if (this->_internal_message() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestResult::GetClassData() const { return &_class_data_; }


void RequestResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestResult*>(&to_msg);
  auto& from = static_cast<const RequestResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.RequestResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_message() != 0) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestResult::CopyFrom(const RequestResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.RequestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestResult::IsInitialized() const {
  return true;
}

void RequestResult::InternalSwap(RequestResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.message_, other->_impl_.message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[11]);
}

// ===================================================================

class ObjectAndPlacement::_Internal {
 public:
};

ObjectAndPlacement::ObjectAndPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.ObjectAndPlacement)
}
ObjectAndPlacement::ObjectAndPlacement(const ObjectAndPlacement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectAndPlacement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datanodeip_){from._impl_.datanodeip_}
    , decltype(_impl_.datanodeport_){from._impl_.datanodeport_}
    , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.blockkeys_){from._impl_.blockkeys_}
    , decltype(_impl_.blockids_){from._impl_.blockids_}
    , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
    , decltype(_impl_.key_){}
    , decltype(_impl_.clientip_){}
    , decltype(_impl_.valuesizebyte_){}
    , decltype(_impl_.k_){}
    , decltype(_impl_.l_){}
    , decltype(_impl_.g_m_){}
    , decltype(_impl_.stripe_id_){}
    , decltype(_impl_.block_size_){}
    , decltype(_impl_.encode_type_){}
    , decltype(_impl_.clientport_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.clientip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientip().empty()) {
    _this->_impl_.clientip_.Set(from._internal_clientip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.valuesizebyte_, &from._impl_.valuesizebyte_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clientport_) -
    reinterpret_cast<char*>(&_impl_.valuesizebyte_)) + sizeof(_impl_.clientport_));
  // @@protoc_insertion_point(copy_constructor:proxy_proto.ObjectAndPlacement)
}

inline void ObjectAndPlacement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datanodeip_){arena}
    , decltype(_impl_.datanodeport_){arena}
    , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.blockkeys_){arena}
    , decltype(_impl_.blockids_){arena}
    , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
    , decltype(_impl_.key_){}
    , decltype(_impl_.clientip_){}
    , decltype(_impl_.valuesizebyte_){0}
    , decltype(_impl_.k_){0}
    , decltype(_impl_.l_){0}
    , decltype(_impl_.g_m_){0}
    , decltype(_impl_.stripe_id_){0}
    , decltype(_impl_.block_size_){0}
    , decltype(_impl_.encode_type_){0}
    , decltype(_impl_.clientport_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObjectAndPlacement::~ObjectAndPlacement() {
  // @@protoc_insertion_point(destructor:proxy_proto.ObjectAndPlacement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectAndPlacement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datanodeip_.~RepeatedPtrField();
  _impl_.datanodeport_.~RepeatedField();
  _impl_.blockkeys_.~RepeatedPtrField();
  _impl_.blockids_.~RepeatedField();
  _impl_.key_.Destroy();
  _impl_.clientip_.Destroy();
}

void ObjectAndPlacement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectAndPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.ObjectAndPlacement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datanodeip_.Clear();
  _impl_.datanodeport_.Clear();
  _impl_.blockkeys_.Clear();
  _impl_.blockids_.Clear();
  _impl_.key_.ClearToEmpty();
  _impl_.clientip_.ClearToEmpty();
  ::memset(&_impl_.valuesizebyte_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.clientport_) -
      reinterpret_cast<char*>(&_impl_.valuesizebyte_)) + sizeof(_impl_.clientport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectAndPlacement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.ObjectAndPlacement.key"));
        } else
          goto handle_unusual;
        continue;
      // int32 valuesizebyte = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.valuesizebyte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 k = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 l = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 g_m = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.g_m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stripe_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.stripe_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string datanodeip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_datanodeip();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.ObjectAndPlacement.datanodeip"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 datanodeport = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_datanodeport(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_datanodeport(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string blockkeys = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blockkeys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.ObjectAndPlacement.blockkeys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 blockids = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_blockids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_blockids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 block_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 encode_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.encode_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string clientip = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_clientip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.ObjectAndPlacement.clientip"));
        } else
          goto handle_unusual;
        continue;
      // int32 clientport = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.clientport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectAndPlacement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.ObjectAndPlacement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.ObjectAndPlacement.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int32 valuesizebyte = 2;
  if (this->_internal_valuesizebyte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_valuesizebyte(), target);
  }

  // int32 k = 3;
  if (this->_internal_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_k(), target);
  }

  // int32 l = 4;
  if (this->_internal_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_l(), target);
  }

  // int32 g_m = 5;
  if (this->_internal_g_m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_g_m(), target);
  }

  // int32 stripe_id = 6;
  if (this->_internal_stripe_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_stripe_id(), target);
  }

  // repeated string datanodeip = 7;
  for (int i = 0, n = this->_internal_datanodeip_size(); i < n; i++) {
    const auto& s = this->_internal_datanodeip(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.ObjectAndPlacement.datanodeip");
    target = stream->WriteString(7, s, target);
  }

  // repeated int32 datanodeport = 8;
  {
    int byte_size = _impl_._datanodeport_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_datanodeport(), byte_size, target);
    }
  }

  // repeated string blockkeys = 9;
  for (int i = 0, n = this->_internal_blockkeys_size(); i < n; i++) {
    const auto& s = this->_internal_blockkeys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.ObjectAndPlacement.blockkeys");
    target = stream->WriteString(9, s, target);
  }

  // repeated int32 blockids = 10;
  {
    int byte_size = _impl_._blockids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_blockids(), byte_size, target);
    }
  }

  // int32 block_size = 11;
  if (this->_internal_block_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_block_size(), target);
  }

  // int32 encode_type = 12;
  if (this->_internal_encode_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_encode_type(), target);
  }

  // string clientip = 13;
  if (!this->_internal_clientip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientip().data(), static_cast<int>(this->_internal_clientip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.ObjectAndPlacement.clientip");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_clientip(), target);
  }

  // int32 clientport = 14;
  if (this->_internal_clientport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_clientport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.ObjectAndPlacement)
  return target;
}

size_t ObjectAndPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.ObjectAndPlacement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string datanodeip = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.datanodeip_.size());
  for (int i = 0, n = _impl_.datanodeip_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.datanodeip_.Get(i));
  }

  // repeated int32 datanodeport = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.datanodeport_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._datanodeport_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string blockkeys = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.blockkeys_.size());
  for (int i = 0, n = _impl_.blockkeys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.blockkeys_.Get(i));
  }

  // repeated int32 blockids = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.blockids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._blockids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string clientip = 13;
  if (!this->_internal_clientip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientip());
  }

  // int32 valuesizebyte = 2;
  if (this->_internal_valuesizebyte() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_valuesizebyte());
  }

  // int32 k = 3;
  if (this->_internal_k() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_k());
  }

  // int32 l = 4;
  if (this->_internal_l() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_l());
  }

  // int32 g_m = 5;
  if (this->_internal_g_m() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_g_m());
  }

  // int32 stripe_id = 6;
  if (this->_internal_stripe_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stripe_id());
  }

  // int32 block_size = 11;
  if (this->_internal_block_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_block_size());
  }

  // int32 encode_type = 12;
  if (this->_internal_encode_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_encode_type());
  }

  // int32 clientport = 14;
  if (this->_internal_clientport() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clientport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectAndPlacement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectAndPlacement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectAndPlacement::GetClassData() const { return &_class_data_; }


void ObjectAndPlacement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectAndPlacement*>(&to_msg);
  auto& from = static_cast<const ObjectAndPlacement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.ObjectAndPlacement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datanodeip_.MergeFrom(from._impl_.datanodeip_);
  _this->_impl_.datanodeport_.MergeFrom(from._impl_.datanodeport_);
  _this->_impl_.blockkeys_.MergeFrom(from._impl_.blockkeys_);
  _this->_impl_.blockids_.MergeFrom(from._impl_.blockids_);
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_clientip().empty()) {
    _this->_internal_set_clientip(from._internal_clientip());
  }
  if (from._internal_valuesizebyte() != 0) {
    _this->_internal_set_valuesizebyte(from._internal_valuesizebyte());
  }
  if (from._internal_k() != 0) {
    _this->_internal_set_k(from._internal_k());
  }
  if (from._internal_l() != 0) {
    _this->_internal_set_l(from._internal_l());
  }
  if (from._internal_g_m() != 0) {
    _this->_internal_set_g_m(from._internal_g_m());
  }
  if (from._internal_stripe_id() != 0) {
    _this->_internal_set_stripe_id(from._internal_stripe_id());
  }
  if (from._internal_block_size() != 0) {
    _this->_internal_set_block_size(from._internal_block_size());
  }
  if (from._internal_encode_type() != 0) {
    _this->_internal_set_encode_type(from._internal_encode_type());
  }
  if (from._internal_clientport() != 0) {
    _this->_internal_set_clientport(from._internal_clientport());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectAndPlacement::CopyFrom(const ObjectAndPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.ObjectAndPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAndPlacement::IsInitialized() const {
  return true;
}

void ObjectAndPlacement::InternalSwap(ObjectAndPlacement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datanodeip_.InternalSwap(&other->_impl_.datanodeip_);
  _impl_.datanodeport_.InternalSwap(&other->_impl_.datanodeport_);
  _impl_.blockkeys_.InternalSwap(&other->_impl_.blockkeys_);
  _impl_.blockids_.InternalSwap(&other->_impl_.blockids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientip_, lhs_arena,
      &other->_impl_.clientip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectAndPlacement, _impl_.clientport_)
      + sizeof(ObjectAndPlacement::_impl_.clientport_)
      - PROTOBUF_FIELD_OFFSET(ObjectAndPlacement, _impl_.valuesizebyte_)>(
          reinterpret_cast<char*>(&_impl_.valuesizebyte_),
          reinterpret_cast<char*>(&other->_impl_.valuesizebyte_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectAndPlacement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[12]);
}

// ===================================================================

class DegradedReadRequest::_Internal {
 public:
};

DegradedReadRequest::DegradedReadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.DegradedReadRequest)
}
DegradedReadRequest::DegradedReadRequest(const DegradedReadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DegradedReadRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datanodeip_){from._impl_.datanodeip_}
    , decltype(_impl_.datanodeport_){from._impl_.datanodeport_}
    , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.blockkeys_){from._impl_.blockkeys_}
    , decltype(_impl_.blockids_){from._impl_.blockids_}
    , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
    , decltype(_impl_.clientip_){}
    , decltype(_impl_.failed_block_key_){}
    , decltype(_impl_.clientport_){}
    , decltype(_impl_.failed_block_id_){}
    , decltype(_impl_.failed_block_stripe_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientip().empty()) {
    _this->_impl_.clientip_.Set(from._internal_clientip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.failed_block_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.failed_block_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_failed_block_key().empty()) {
    _this->_impl_.failed_block_key_.Set(from._internal_failed_block_key(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.clientport_, &from._impl_.clientport_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.failed_block_stripe_id_) -
    reinterpret_cast<char*>(&_impl_.clientport_)) + sizeof(_impl_.failed_block_stripe_id_));
  // @@protoc_insertion_point(copy_constructor:proxy_proto.DegradedReadRequest)
}

inline void DegradedReadRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datanodeip_){arena}
    , decltype(_impl_.datanodeport_){arena}
    , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.blockkeys_){arena}
    , decltype(_impl_.blockids_){arena}
    , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
    , decltype(_impl_.clientip_){}
    , decltype(_impl_.failed_block_key_){}
    , decltype(_impl_.clientport_){0}
    , decltype(_impl_.failed_block_id_){0}
    , decltype(_impl_.failed_block_stripe_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.failed_block_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.failed_block_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DegradedReadRequest::~DegradedReadRequest() {
  // @@protoc_insertion_point(destructor:proxy_proto.DegradedReadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DegradedReadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datanodeip_.~RepeatedPtrField();
  _impl_.datanodeport_.~RepeatedField();
  _impl_.blockkeys_.~RepeatedPtrField();
  _impl_.blockids_.~RepeatedField();
  _impl_.clientip_.Destroy();
  _impl_.failed_block_key_.Destroy();
}

void DegradedReadRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DegradedReadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.DegradedReadRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datanodeip_.Clear();
  _impl_.datanodeport_.Clear();
  _impl_.blockkeys_.Clear();
  _impl_.blockids_.Clear();
  _impl_.clientip_.ClearToEmpty();
  _impl_.failed_block_key_.ClearToEmpty();
  ::memset(&_impl_.clientport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.failed_block_stripe_id_) -
      reinterpret_cast<char*>(&_impl_.clientport_)) + sizeof(_impl_.failed_block_stripe_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DegradedReadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.DegradedReadRequest.clientip"));
        } else
          goto handle_unusual;
        continue;
      // int32 clientport = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.clientport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 failed_block_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.failed_block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 failed_block_stripe_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.failed_block_stripe_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string failed_block_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_failed_block_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.DegradedReadRequest.failed_block_key"));
        } else
          goto handle_unusual;
        continue;
      // repeated string datanodeip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_datanodeip();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.DegradedReadRequest.datanodeip"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 datanodeport = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_datanodeport(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_datanodeport(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string blockkeys = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blockkeys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.DegradedReadRequest.blockkeys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 blockids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_blockids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_blockids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DegradedReadRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.DegradedReadRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientip = 1;
  if (!this->_internal_clientip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientip().data(), static_cast<int>(this->_internal_clientip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.DegradedReadRequest.clientip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientip(), target);
  }

  // int32 clientport = 2;
  if (this->_internal_clientport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_clientport(), target);
  }

  // int32 failed_block_id = 3;
  if (this->_internal_failed_block_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_failed_block_id(), target);
  }

  // int32 failed_block_stripe_id = 4;
  if (this->_internal_failed_block_stripe_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_failed_block_stripe_id(), target);
  }

  // string failed_block_key = 5;
  if (!this->_internal_failed_block_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_failed_block_key().data(), static_cast<int>(this->_internal_failed_block_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.DegradedReadRequest.failed_block_key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_failed_block_key(), target);
  }

  // repeated string datanodeip = 6;
  for (int i = 0, n = this->_internal_datanodeip_size(); i < n; i++) {
    const auto& s = this->_internal_datanodeip(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.DegradedReadRequest.datanodeip");
    target = stream->WriteString(6, s, target);
  }

  // repeated int32 datanodeport = 7;
  {
    int byte_size = _impl_._datanodeport_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_datanodeport(), byte_size, target);
    }
  }

  // repeated string blockkeys = 8;
  for (int i = 0, n = this->_internal_blockkeys_size(); i < n; i++) {
    const auto& s = this->_internal_blockkeys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.DegradedReadRequest.blockkeys");
    target = stream->WriteString(8, s, target);
  }

  // repeated int32 blockids = 9;
  {
    int byte_size = _impl_._blockids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_blockids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.DegradedReadRequest)
  return target;
}

size_t DegradedReadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.DegradedReadRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string datanodeip = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.datanodeip_.size());
  for (int i = 0, n = _impl_.datanodeip_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.datanodeip_.Get(i));
  }

  // repeated int32 datanodeport = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.datanodeport_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._datanodeport_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string blockkeys = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.blockkeys_.size());
  for (int i = 0, n = _impl_.blockkeys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.blockkeys_.Get(i));
  }

  // repeated int32 blockids = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.blockids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._blockids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string clientip = 1;
  if (!this->_internal_clientip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientip());
  }

  // string failed_block_key = 5;
  if (!this->_internal_failed_block_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_failed_block_key());
  }

  // int32 clientport = 2;
  if (this->_internal_clientport() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clientport());
  }

  // int32 failed_block_id = 3;
  if (this->_internal_failed_block_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_failed_block_id());
  }

  // int32 failed_block_stripe_id = 4;
  if (this->_internal_failed_block_stripe_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_failed_block_stripe_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DegradedReadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DegradedReadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DegradedReadRequest::GetClassData() const { return &_class_data_; }


void DegradedReadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DegradedReadRequest*>(&to_msg);
  auto& from = static_cast<const DegradedReadRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.DegradedReadRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datanodeip_.MergeFrom(from._impl_.datanodeip_);
  _this->_impl_.datanodeport_.MergeFrom(from._impl_.datanodeport_);
  _this->_impl_.blockkeys_.MergeFrom(from._impl_.blockkeys_);
  _this->_impl_.blockids_.MergeFrom(from._impl_.blockids_);
  if (!from._internal_clientip().empty()) {
    _this->_internal_set_clientip(from._internal_clientip());
  }
  if (!from._internal_failed_block_key().empty()) {
    _this->_internal_set_failed_block_key(from._internal_failed_block_key());
  }
  if (from._internal_clientport() != 0) {
    _this->_internal_set_clientport(from._internal_clientport());
  }
  if (from._internal_failed_block_id() != 0) {
    _this->_internal_set_failed_block_id(from._internal_failed_block_id());
  }
  if (from._internal_failed_block_stripe_id() != 0) {
    _this->_internal_set_failed_block_stripe_id(from._internal_failed_block_stripe_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DegradedReadRequest::CopyFrom(const DegradedReadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.DegradedReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DegradedReadRequest::IsInitialized() const {
  return true;
}

void DegradedReadRequest::InternalSwap(DegradedReadRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datanodeip_.InternalSwap(&other->_impl_.datanodeip_);
  _impl_.datanodeport_.InternalSwap(&other->_impl_.datanodeport_);
  _impl_.blockkeys_.InternalSwap(&other->_impl_.blockkeys_);
  _impl_.blockids_.InternalSwap(&other->_impl_.blockids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientip_, lhs_arena,
      &other->_impl_.clientip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.failed_block_key_, lhs_arena,
      &other->_impl_.failed_block_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DegradedReadRequest, _impl_.failed_block_stripe_id_)
      + sizeof(DegradedReadRequest::_impl_.failed_block_stripe_id_)
      - PROTOBUF_FIELD_OFFSET(DegradedReadRequest, _impl_.clientport_)>(
          reinterpret_cast<char*>(&_impl_.clientport_),
          reinterpret_cast<char*>(&other->_impl_.clientport_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DegradedReadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[13]);
}

// ===================================================================

class DegradedReadReply::_Internal {
 public:
};

DegradedReadReply::DegradedReadReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.DegradedReadReply)
}
DegradedReadReply::DegradedReadReply(const DegradedReadReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DegradedReadReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.disk_io_start_time_){}
    , decltype(_impl_.disk_io_end_time_){}
    , decltype(_impl_.network_start_time_){}
    , decltype(_impl_.network_end_time_){}
    , decltype(_impl_.decode_start_time_){}
    , decltype(_impl_.decode_end_time_){}
    , decltype(_impl_.cross_rack_time_){}
    , decltype(_impl_.cross_rack_xor_time_){}
    , decltype(_impl_.grpc_start_time_){}
    , decltype(_impl_.data_node_grpc_notify_time_){}
    , decltype(_impl_.data_node_grpc_start_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.disk_io_start_time_, &from._impl_.disk_io_start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.data_node_grpc_start_time_) -
    reinterpret_cast<char*>(&_impl_.disk_io_start_time_)) + sizeof(_impl_.data_node_grpc_start_time_));
  // @@protoc_insertion_point(copy_constructor:proxy_proto.DegradedReadReply)
}

inline void DegradedReadReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.disk_io_start_time_){0}
    , decltype(_impl_.disk_io_end_time_){0}
    , decltype(_impl_.network_start_time_){0}
    , decltype(_impl_.network_end_time_){0}
    , decltype(_impl_.decode_start_time_){0}
    , decltype(_impl_.decode_end_time_){0}
    , decltype(_impl_.cross_rack_time_){0}
    , decltype(_impl_.cross_rack_xor_time_){0}
    , decltype(_impl_.grpc_start_time_){0}
    , decltype(_impl_.data_node_grpc_notify_time_){0}
    , decltype(_impl_.data_node_grpc_start_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DegradedReadReply::~DegradedReadReply() {
  // @@protoc_insertion_point(destructor:proxy_proto.DegradedReadReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DegradedReadReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DegradedReadReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DegradedReadReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.DegradedReadReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.disk_io_start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.data_node_grpc_start_time_) -
      reinterpret_cast<char*>(&_impl_.disk_io_start_time_)) + sizeof(_impl_.data_node_grpc_start_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DegradedReadReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double disk_io_start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.disk_io_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double disk_io_end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.disk_io_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double network_start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.network_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double network_end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.network_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double decode_start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.decode_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double decode_end_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.decode_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cross_rack_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.cross_rack_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cross_rack_xor_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.cross_rack_xor_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double grpc_start_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.grpc_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double data_node_grpc_notify_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.data_node_grpc_notify_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double data_node_grpc_start_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.data_node_grpc_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DegradedReadReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.DegradedReadReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double disk_io_start_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_disk_io_start_time = this->_internal_disk_io_start_time();
  uint64_t raw_disk_io_start_time;
  memcpy(&raw_disk_io_start_time, &tmp_disk_io_start_time, sizeof(tmp_disk_io_start_time));
  if (raw_disk_io_start_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_disk_io_start_time(), target);
  }

  // double disk_io_end_time = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_disk_io_end_time = this->_internal_disk_io_end_time();
  uint64_t raw_disk_io_end_time;
  memcpy(&raw_disk_io_end_time, &tmp_disk_io_end_time, sizeof(tmp_disk_io_end_time));
  if (raw_disk_io_end_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_disk_io_end_time(), target);
  }

  // double network_start_time = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_network_start_time = this->_internal_network_start_time();
  uint64_t raw_network_start_time;
  memcpy(&raw_network_start_time, &tmp_network_start_time, sizeof(tmp_network_start_time));
  if (raw_network_start_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_network_start_time(), target);
  }

  // double network_end_time = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_network_end_time = this->_internal_network_end_time();
  uint64_t raw_network_end_time;
  memcpy(&raw_network_end_time, &tmp_network_end_time, sizeof(tmp_network_end_time));
  if (raw_network_end_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_network_end_time(), target);
  }

  // double decode_start_time = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_decode_start_time = this->_internal_decode_start_time();
  uint64_t raw_decode_start_time;
  memcpy(&raw_decode_start_time, &tmp_decode_start_time, sizeof(tmp_decode_start_time));
  if (raw_decode_start_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_decode_start_time(), target);
  }

  // double decode_end_time = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_decode_end_time = this->_internal_decode_end_time();
  uint64_t raw_decode_end_time;
  memcpy(&raw_decode_end_time, &tmp_decode_end_time, sizeof(tmp_decode_end_time));
  if (raw_decode_end_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_decode_end_time(), target);
  }

  // double cross_rack_time = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cross_rack_time = this->_internal_cross_rack_time();
  uint64_t raw_cross_rack_time;
  memcpy(&raw_cross_rack_time, &tmp_cross_rack_time, sizeof(tmp_cross_rack_time));
  if (raw_cross_rack_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_cross_rack_time(), target);
  }

  // double cross_rack_xor_time = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cross_rack_xor_time = this->_internal_cross_rack_xor_time();
  uint64_t raw_cross_rack_xor_time;
  memcpy(&raw_cross_rack_xor_time, &tmp_cross_rack_xor_time, sizeof(tmp_cross_rack_xor_time));
  if (raw_cross_rack_xor_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_cross_rack_xor_time(), target);
  }

  // double grpc_start_time = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_grpc_start_time = this->_internal_grpc_start_time();
  uint64_t raw_grpc_start_time;
  memcpy(&raw_grpc_start_time, &tmp_grpc_start_time, sizeof(tmp_grpc_start_time));
  if (raw_grpc_start_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_grpc_start_time(), target);
  }

  // double data_node_grpc_notify_time = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_node_grpc_notify_time = this->_internal_data_node_grpc_notify_time();
  uint64_t raw_data_node_grpc_notify_time;
  memcpy(&raw_data_node_grpc_notify_time, &tmp_data_node_grpc_notify_time, sizeof(tmp_data_node_grpc_notify_time));
  if (raw_data_node_grpc_notify_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_data_node_grpc_notify_time(), target);
  }

  // double data_node_grpc_start_time = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_node_grpc_start_time = this->_internal_data_node_grpc_start_time();
  uint64_t raw_data_node_grpc_start_time;
  memcpy(&raw_data_node_grpc_start_time, &tmp_data_node_grpc_start_time, sizeof(tmp_data_node_grpc_start_time));
  if (raw_data_node_grpc_start_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_data_node_grpc_start_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.DegradedReadReply)
  return target;
}

size_t DegradedReadReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.DegradedReadReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double disk_io_start_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_disk_io_start_time = this->_internal_disk_io_start_time();
  uint64_t raw_disk_io_start_time;
  memcpy(&raw_disk_io_start_time, &tmp_disk_io_start_time, sizeof(tmp_disk_io_start_time));
  if (raw_disk_io_start_time != 0) {
    total_size += 1 + 8;
  }

  // double disk_io_end_time = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_disk_io_end_time = this->_internal_disk_io_end_time();
  uint64_t raw_disk_io_end_time;
  memcpy(&raw_disk_io_end_time, &tmp_disk_io_end_time, sizeof(tmp_disk_io_end_time));
  if (raw_disk_io_end_time != 0) {
    total_size += 1 + 8;
  }

  // double network_start_time = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_network_start_time = this->_internal_network_start_time();
  uint64_t raw_network_start_time;
  memcpy(&raw_network_start_time, &tmp_network_start_time, sizeof(tmp_network_start_time));
  if (raw_network_start_time != 0) {
    total_size += 1 + 8;
  }

  // double network_end_time = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_network_end_time = this->_internal_network_end_time();
  uint64_t raw_network_end_time;
  memcpy(&raw_network_end_time, &tmp_network_end_time, sizeof(tmp_network_end_time));
  if (raw_network_end_time != 0) {
    total_size += 1 + 8;
  }

  // double decode_start_time = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_decode_start_time = this->_internal_decode_start_time();
  uint64_t raw_decode_start_time;
  memcpy(&raw_decode_start_time, &tmp_decode_start_time, sizeof(tmp_decode_start_time));
  if (raw_decode_start_time != 0) {
    total_size += 1 + 8;
  }

  // double decode_end_time = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_decode_end_time = this->_internal_decode_end_time();
  uint64_t raw_decode_end_time;
  memcpy(&raw_decode_end_time, &tmp_decode_end_time, sizeof(tmp_decode_end_time));
  if (raw_decode_end_time != 0) {
    total_size += 1 + 8;
  }

  // double cross_rack_time = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cross_rack_time = this->_internal_cross_rack_time();
  uint64_t raw_cross_rack_time;
  memcpy(&raw_cross_rack_time, &tmp_cross_rack_time, sizeof(tmp_cross_rack_time));
  if (raw_cross_rack_time != 0) {
    total_size += 1 + 8;
  }

  // double cross_rack_xor_time = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cross_rack_xor_time = this->_internal_cross_rack_xor_time();
  uint64_t raw_cross_rack_xor_time;
  memcpy(&raw_cross_rack_xor_time, &tmp_cross_rack_xor_time, sizeof(tmp_cross_rack_xor_time));
  if (raw_cross_rack_xor_time != 0) {
    total_size += 1 + 8;
  }

  // double grpc_start_time = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_grpc_start_time = this->_internal_grpc_start_time();
  uint64_t raw_grpc_start_time;
  memcpy(&raw_grpc_start_time, &tmp_grpc_start_time, sizeof(tmp_grpc_start_time));
  if (raw_grpc_start_time != 0) {
    total_size += 1 + 8;
  }

  // double data_node_grpc_notify_time = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_node_grpc_notify_time = this->_internal_data_node_grpc_notify_time();
  uint64_t raw_data_node_grpc_notify_time;
  memcpy(&raw_data_node_grpc_notify_time, &tmp_data_node_grpc_notify_time, sizeof(tmp_data_node_grpc_notify_time));
  if (raw_data_node_grpc_notify_time != 0) {
    total_size += 1 + 8;
  }

  // double data_node_grpc_start_time = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_node_grpc_start_time = this->_internal_data_node_grpc_start_time();
  uint64_t raw_data_node_grpc_start_time;
  memcpy(&raw_data_node_grpc_start_time, &tmp_data_node_grpc_start_time, sizeof(tmp_data_node_grpc_start_time));
  if (raw_data_node_grpc_start_time != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DegradedReadReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DegradedReadReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DegradedReadReply::GetClassData() const { return &_class_data_; }


void DegradedReadReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DegradedReadReply*>(&to_msg);
  auto& from = static_cast<const DegradedReadReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.DegradedReadReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_disk_io_start_time = from._internal_disk_io_start_time();
  uint64_t raw_disk_io_start_time;
  memcpy(&raw_disk_io_start_time, &tmp_disk_io_start_time, sizeof(tmp_disk_io_start_time));
  if (raw_disk_io_start_time != 0) {
    _this->_internal_set_disk_io_start_time(from._internal_disk_io_start_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_disk_io_end_time = from._internal_disk_io_end_time();
  uint64_t raw_disk_io_end_time;
  memcpy(&raw_disk_io_end_time, &tmp_disk_io_end_time, sizeof(tmp_disk_io_end_time));
  if (raw_disk_io_end_time != 0) {
    _this->_internal_set_disk_io_end_time(from._internal_disk_io_end_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_network_start_time = from._internal_network_start_time();
  uint64_t raw_network_start_time;
  memcpy(&raw_network_start_time, &tmp_network_start_time, sizeof(tmp_network_start_time));
  if (raw_network_start_time != 0) {
    _this->_internal_set_network_start_time(from._internal_network_start_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_network_end_time = from._internal_network_end_time();
  uint64_t raw_network_end_time;
  memcpy(&raw_network_end_time, &tmp_network_end_time, sizeof(tmp_network_end_time));
  if (raw_network_end_time != 0) {
    _this->_internal_set_network_end_time(from._internal_network_end_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_decode_start_time = from._internal_decode_start_time();
  uint64_t raw_decode_start_time;
  memcpy(&raw_decode_start_time, &tmp_decode_start_time, sizeof(tmp_decode_start_time));
  if (raw_decode_start_time != 0) {
    _this->_internal_set_decode_start_time(from._internal_decode_start_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_decode_end_time = from._internal_decode_end_time();
  uint64_t raw_decode_end_time;
  memcpy(&raw_decode_end_time, &tmp_decode_end_time, sizeof(tmp_decode_end_time));
  if (raw_decode_end_time != 0) {
    _this->_internal_set_decode_end_time(from._internal_decode_end_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cross_rack_time = from._internal_cross_rack_time();
  uint64_t raw_cross_rack_time;
  memcpy(&raw_cross_rack_time, &tmp_cross_rack_time, sizeof(tmp_cross_rack_time));
  if (raw_cross_rack_time != 0) {
    _this->_internal_set_cross_rack_time(from._internal_cross_rack_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cross_rack_xor_time = from._internal_cross_rack_xor_time();
  uint64_t raw_cross_rack_xor_time;
  memcpy(&raw_cross_rack_xor_time, &tmp_cross_rack_xor_time, sizeof(tmp_cross_rack_xor_time));
  if (raw_cross_rack_xor_time != 0) {
    _this->_internal_set_cross_rack_xor_time(from._internal_cross_rack_xor_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_grpc_start_time = from._internal_grpc_start_time();
  uint64_t raw_grpc_start_time;
  memcpy(&raw_grpc_start_time, &tmp_grpc_start_time, sizeof(tmp_grpc_start_time));
  if (raw_grpc_start_time != 0) {
    _this->_internal_set_grpc_start_time(from._internal_grpc_start_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_node_grpc_notify_time = from._internal_data_node_grpc_notify_time();
  uint64_t raw_data_node_grpc_notify_time;
  memcpy(&raw_data_node_grpc_notify_time, &tmp_data_node_grpc_notify_time, sizeof(tmp_data_node_grpc_notify_time));
  if (raw_data_node_grpc_notify_time != 0) {
    _this->_internal_set_data_node_grpc_notify_time(from._internal_data_node_grpc_notify_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_node_grpc_start_time = from._internal_data_node_grpc_start_time();
  uint64_t raw_data_node_grpc_start_time;
  memcpy(&raw_data_node_grpc_start_time, &tmp_data_node_grpc_start_time, sizeof(tmp_data_node_grpc_start_time));
  if (raw_data_node_grpc_start_time != 0) {
    _this->_internal_set_data_node_grpc_start_time(from._internal_data_node_grpc_start_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DegradedReadReply::CopyFrom(const DegradedReadReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.DegradedReadReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DegradedReadReply::IsInitialized() const {
  return true;
}

void DegradedReadReply::InternalSwap(DegradedReadReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DegradedReadReply, _impl_.data_node_grpc_start_time_)
      + sizeof(DegradedReadReply::_impl_.data_node_grpc_start_time_)
      - PROTOBUF_FIELD_OFFSET(DegradedReadReply, _impl_.disk_io_start_time_)>(
          reinterpret_cast<char*>(&_impl_.disk_io_start_time_),
          reinterpret_cast<char*>(&other->_impl_.disk_io_start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DegradedReadReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[14]);
}

// ===================================================================

class RecoveryRequest::_Internal {
 public:
};

RecoveryRequest::RecoveryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.RecoveryRequest)
}
RecoveryRequest::RecoveryRequest(const RecoveryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecoveryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datanodeip_){from._impl_.datanodeip_}
    , decltype(_impl_.datanodeport_){from._impl_.datanodeport_}
    , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.blockkeys_){from._impl_.blockkeys_}
    , decltype(_impl_.blockids_){from._impl_.blockids_}
    , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
    , decltype(_impl_.proxyip_){from._impl_.proxyip_}
    , decltype(_impl_.proxyport_){from._impl_.proxyport_}
    , /*decltype(_impl_._proxyport_cached_byte_size_)*/{0}
    , decltype(_impl_.replaced_node_ip_){}
    , decltype(_impl_.failed_block_key_){}
    , decltype(_impl_.replaced_node_port_){}
    , decltype(_impl_.failed_block_id_){}
    , decltype(_impl_.cross_rack_num_){}
    , decltype(_impl_.is_to_send_block_id_){}
    , decltype(_impl_.block_id_to_send_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.replaced_node_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.replaced_node_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_replaced_node_ip().empty()) {
    _this->_impl_.replaced_node_ip_.Set(from._internal_replaced_node_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.failed_block_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.failed_block_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_failed_block_key().empty()) {
    _this->_impl_.failed_block_key_.Set(from._internal_failed_block_key(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.replaced_node_port_, &from._impl_.replaced_node_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.block_id_to_send_) -
    reinterpret_cast<char*>(&_impl_.replaced_node_port_)) + sizeof(_impl_.block_id_to_send_));
  // @@protoc_insertion_point(copy_constructor:proxy_proto.RecoveryRequest)
}

inline void RecoveryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datanodeip_){arena}
    , decltype(_impl_.datanodeport_){arena}
    , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.blockkeys_){arena}
    , decltype(_impl_.blockids_){arena}
    , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
    , decltype(_impl_.proxyip_){arena}
    , decltype(_impl_.proxyport_){arena}
    , /*decltype(_impl_._proxyport_cached_byte_size_)*/{0}
    , decltype(_impl_.replaced_node_ip_){}
    , decltype(_impl_.failed_block_key_){}
    , decltype(_impl_.replaced_node_port_){0}
    , decltype(_impl_.failed_block_id_){0}
    , decltype(_impl_.cross_rack_num_){0}
    , decltype(_impl_.is_to_send_block_id_){false}
    , decltype(_impl_.block_id_to_send_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.replaced_node_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.replaced_node_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.failed_block_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.failed_block_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RecoveryRequest::~RecoveryRequest() {
  // @@protoc_insertion_point(destructor:proxy_proto.RecoveryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecoveryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datanodeip_.~RepeatedPtrField();
  _impl_.datanodeport_.~RepeatedField();
  _impl_.blockkeys_.~RepeatedPtrField();
  _impl_.blockids_.~RepeatedField();
  _impl_.proxyip_.~RepeatedPtrField();
  _impl_.proxyport_.~RepeatedField();
  _impl_.replaced_node_ip_.Destroy();
  _impl_.failed_block_key_.Destroy();
}

void RecoveryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecoveryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.RecoveryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datanodeip_.Clear();
  _impl_.datanodeport_.Clear();
  _impl_.blockkeys_.Clear();
  _impl_.blockids_.Clear();
  _impl_.proxyip_.Clear();
  _impl_.proxyport_.Clear();
  _impl_.replaced_node_ip_.ClearToEmpty();
  _impl_.failed_block_key_.ClearToEmpty();
  ::memset(&_impl_.replaced_node_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.block_id_to_send_) -
      reinterpret_cast<char*>(&_impl_.replaced_node_port_)) + sizeof(_impl_.block_id_to_send_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecoveryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string replaced_node_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_replaced_node_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.RecoveryRequest.replaced_node_ip"));
        } else
          goto handle_unusual;
        continue;
      // int32 replaced_node_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.replaced_node_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 failed_block_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.failed_block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string failed_block_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_failed_block_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.RecoveryRequest.failed_block_key"));
        } else
          goto handle_unusual;
        continue;
      // int32 cross_rack_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.cross_rack_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string datanodeip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_datanodeip();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.RecoveryRequest.datanodeip"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 datanodeport = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_datanodeport(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_datanodeport(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string blockkeys = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blockkeys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.RecoveryRequest.blockkeys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 blockids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_blockids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_blockids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string proxyip = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_proxyip();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.RecoveryRequest.proxyip"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 proxyport = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_proxyport(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_proxyport(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_to_send_block_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.is_to_send_block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 block_id_to_send = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.block_id_to_send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecoveryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.RecoveryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string replaced_node_ip = 1;
  if (!this->_internal_replaced_node_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_replaced_node_ip().data(), static_cast<int>(this->_internal_replaced_node_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.RecoveryRequest.replaced_node_ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_replaced_node_ip(), target);
  }

  // int32 replaced_node_port = 2;
  if (this->_internal_replaced_node_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_replaced_node_port(), target);
  }

  // int32 failed_block_id = 3;
  if (this->_internal_failed_block_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_failed_block_id(), target);
  }

  // string failed_block_key = 4;
  if (!this->_internal_failed_block_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_failed_block_key().data(), static_cast<int>(this->_internal_failed_block_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.RecoveryRequest.failed_block_key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_failed_block_key(), target);
  }

  // int32 cross_rack_num = 5;
  if (this->_internal_cross_rack_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_cross_rack_num(), target);
  }

  // repeated string datanodeip = 6;
  for (int i = 0, n = this->_internal_datanodeip_size(); i < n; i++) {
    const auto& s = this->_internal_datanodeip(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.RecoveryRequest.datanodeip");
    target = stream->WriteString(6, s, target);
  }

  // repeated int32 datanodeport = 7;
  {
    int byte_size = _impl_._datanodeport_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_datanodeport(), byte_size, target);
    }
  }

  // repeated string blockkeys = 8;
  for (int i = 0, n = this->_internal_blockkeys_size(); i < n; i++) {
    const auto& s = this->_internal_blockkeys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.RecoveryRequest.blockkeys");
    target = stream->WriteString(8, s, target);
  }

  // repeated int32 blockids = 9;
  {
    int byte_size = _impl_._blockids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_blockids(), byte_size, target);
    }
  }

  // repeated string proxyip = 10;
  for (int i = 0, n = this->_internal_proxyip_size(); i < n; i++) {
    const auto& s = this->_internal_proxyip(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.RecoveryRequest.proxyip");
    target = stream->WriteString(10, s, target);
  }

  // repeated int32 proxyport = 11;
  {
    int byte_size = _impl_._proxyport_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          11, _internal_proxyport(), byte_size, target);
    }
  }

  // bool is_to_send_block_id = 12;
  if (this->_internal_is_to_send_block_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_is_to_send_block_id(), target);
  }

  // int32 block_id_to_send = 13;
  if (this->_internal_block_id_to_send() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_block_id_to_send(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.RecoveryRequest)
  return target;
}

size_t RecoveryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.RecoveryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string datanodeip = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.datanodeip_.size());
  for (int i = 0, n = _impl_.datanodeip_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.datanodeip_.Get(i));
  }

  // repeated int32 datanodeport = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.datanodeport_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._datanodeport_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string blockkeys = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.blockkeys_.size());
  for (int i = 0, n = _impl_.blockkeys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.blockkeys_.Get(i));
  }

  // repeated int32 blockids = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.blockids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._blockids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string proxyip = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.proxyip_.size());
  for (int i = 0, n = _impl_.proxyip_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.proxyip_.Get(i));
  }

  // repeated int32 proxyport = 11;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.proxyport_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._proxyport_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string replaced_node_ip = 1;
  if (!this->_internal_replaced_node_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_replaced_node_ip());
  }

  // string failed_block_key = 4;
  if (!this->_internal_failed_block_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_failed_block_key());
  }

  // int32 replaced_node_port = 2;
  if (this->_internal_replaced_node_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_replaced_node_port());
  }

  // int32 failed_block_id = 3;
  if (this->_internal_failed_block_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_failed_block_id());
  }

  // int32 cross_rack_num = 5;
  if (this->_internal_cross_rack_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cross_rack_num());
  }

  // bool is_to_send_block_id = 12;
  if (this->_internal_is_to_send_block_id() != 0) {
    total_size += 1 + 1;
  }

  // int32 block_id_to_send = 13;
  if (this->_internal_block_id_to_send() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_block_id_to_send());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecoveryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecoveryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecoveryRequest::GetClassData() const { return &_class_data_; }


void RecoveryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecoveryRequest*>(&to_msg);
  auto& from = static_cast<const RecoveryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.RecoveryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datanodeip_.MergeFrom(from._impl_.datanodeip_);
  _this->_impl_.datanodeport_.MergeFrom(from._impl_.datanodeport_);
  _this->_impl_.blockkeys_.MergeFrom(from._impl_.blockkeys_);
  _this->_impl_.blockids_.MergeFrom(from._impl_.blockids_);
  _this->_impl_.proxyip_.MergeFrom(from._impl_.proxyip_);
  _this->_impl_.proxyport_.MergeFrom(from._impl_.proxyport_);
  if (!from._internal_replaced_node_ip().empty()) {
    _this->_internal_set_replaced_node_ip(from._internal_replaced_node_ip());
  }
  if (!from._internal_failed_block_key().empty()) {
    _this->_internal_set_failed_block_key(from._internal_failed_block_key());
  }
  if (from._internal_replaced_node_port() != 0) {
    _this->_internal_set_replaced_node_port(from._internal_replaced_node_port());
  }
  if (from._internal_failed_block_id() != 0) {
    _this->_internal_set_failed_block_id(from._internal_failed_block_id());
  }
  if (from._internal_cross_rack_num() != 0) {
    _this->_internal_set_cross_rack_num(from._internal_cross_rack_num());
  }
  if (from._internal_is_to_send_block_id() != 0) {
    _this->_internal_set_is_to_send_block_id(from._internal_is_to_send_block_id());
  }
  if (from._internal_block_id_to_send() != 0) {
    _this->_internal_set_block_id_to_send(from._internal_block_id_to_send());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecoveryRequest::CopyFrom(const RecoveryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.RecoveryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoveryRequest::IsInitialized() const {
  return true;
}

void RecoveryRequest::InternalSwap(RecoveryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datanodeip_.InternalSwap(&other->_impl_.datanodeip_);
  _impl_.datanodeport_.InternalSwap(&other->_impl_.datanodeport_);
  _impl_.blockkeys_.InternalSwap(&other->_impl_.blockkeys_);
  _impl_.blockids_.InternalSwap(&other->_impl_.blockids_);
  _impl_.proxyip_.InternalSwap(&other->_impl_.proxyip_);
  _impl_.proxyport_.InternalSwap(&other->_impl_.proxyport_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.replaced_node_ip_, lhs_arena,
      &other->_impl_.replaced_node_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.failed_block_key_, lhs_arena,
      &other->_impl_.failed_block_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecoveryRequest, _impl_.block_id_to_send_)
      + sizeof(RecoveryRequest::_impl_.block_id_to_send_)
      - PROTOBUF_FIELD_OFFSET(RecoveryRequest, _impl_.replaced_node_port_)>(
          reinterpret_cast<char*>(&_impl_.replaced_node_port_),
          reinterpret_cast<char*>(&other->_impl_.replaced_node_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecoveryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[15]);
}

// ===================================================================

class MultipleRecoveryRequest::_Internal {
 public:
};

MultipleRecoveryRequest::MultipleRecoveryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.MultipleRecoveryRequest)
}
MultipleRecoveryRequest::MultipleRecoveryRequest(const MultipleRecoveryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultipleRecoveryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.replaced_node_ip_){from._impl_.replaced_node_ip_}
    , decltype(_impl_.replaced_node_port_){from._impl_.replaced_node_port_}
    , /*decltype(_impl_._replaced_node_port_cached_byte_size_)*/{0}
    , decltype(_impl_.failed_block_id_){from._impl_.failed_block_id_}
    , /*decltype(_impl_._failed_block_id_cached_byte_size_)*/{0}
    , decltype(_impl_.failed_block_key_){from._impl_.failed_block_key_}
    , decltype(_impl_.failed_block_stripe_id_){from._impl_.failed_block_stripe_id_}
    , /*decltype(_impl_._failed_block_stripe_id_cached_byte_size_)*/{0}
    , decltype(_impl_.cross_rack_num_){from._impl_.cross_rack_num_}
    , /*decltype(_impl_._cross_rack_num_cached_byte_size_)*/{0}
    , decltype(_impl_.datanodeip_){from._impl_.datanodeip_}
    , decltype(_impl_.datanodeport_){from._impl_.datanodeport_}
    , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.blockkeys_){from._impl_.blockkeys_}
    , decltype(_impl_.blockids_){from._impl_.blockids_}
    , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
    , decltype(_impl_.datanode_num_){from._impl_.datanode_num_}
    , /*decltype(_impl_._datanode_num_cached_byte_size_)*/{0}
    , decltype(_impl_.failed_block_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.failed_block_num_ = from._impl_.failed_block_num_;
  // @@protoc_insertion_point(copy_constructor:proxy_proto.MultipleRecoveryRequest)
}

inline void MultipleRecoveryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.replaced_node_ip_){arena}
    , decltype(_impl_.replaced_node_port_){arena}
    , /*decltype(_impl_._replaced_node_port_cached_byte_size_)*/{0}
    , decltype(_impl_.failed_block_id_){arena}
    , /*decltype(_impl_._failed_block_id_cached_byte_size_)*/{0}
    , decltype(_impl_.failed_block_key_){arena}
    , decltype(_impl_.failed_block_stripe_id_){arena}
    , /*decltype(_impl_._failed_block_stripe_id_cached_byte_size_)*/{0}
    , decltype(_impl_.cross_rack_num_){arena}
    , /*decltype(_impl_._cross_rack_num_cached_byte_size_)*/{0}
    , decltype(_impl_.datanodeip_){arena}
    , decltype(_impl_.datanodeport_){arena}
    , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.blockkeys_){arena}
    , decltype(_impl_.blockids_){arena}
    , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
    , decltype(_impl_.datanode_num_){arena}
    , /*decltype(_impl_._datanode_num_cached_byte_size_)*/{0}
    , decltype(_impl_.failed_block_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultipleRecoveryRequest::~MultipleRecoveryRequest() {
  // @@protoc_insertion_point(destructor:proxy_proto.MultipleRecoveryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultipleRecoveryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.replaced_node_ip_.~RepeatedPtrField();
  _impl_.replaced_node_port_.~RepeatedField();
  _impl_.failed_block_id_.~RepeatedField();
  _impl_.failed_block_key_.~RepeatedPtrField();
  _impl_.failed_block_stripe_id_.~RepeatedField();
  _impl_.cross_rack_num_.~RepeatedField();
  _impl_.datanodeip_.~RepeatedPtrField();
  _impl_.datanodeport_.~RepeatedField();
  _impl_.blockkeys_.~RepeatedPtrField();
  _impl_.blockids_.~RepeatedField();
  _impl_.datanode_num_.~RepeatedField();
}

void MultipleRecoveryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultipleRecoveryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.MultipleRecoveryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.replaced_node_ip_.Clear();
  _impl_.replaced_node_port_.Clear();
  _impl_.failed_block_id_.Clear();
  _impl_.failed_block_key_.Clear();
  _impl_.failed_block_stripe_id_.Clear();
  _impl_.cross_rack_num_.Clear();
  _impl_.datanodeip_.Clear();
  _impl_.datanodeport_.Clear();
  _impl_.blockkeys_.Clear();
  _impl_.blockids_.Clear();
  _impl_.datanode_num_.Clear();
  _impl_.failed_block_num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultipleRecoveryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string replaced_node_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_replaced_node_ip();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.MultipleRecoveryRequest.replaced_node_ip"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 replaced_node_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_replaced_node_port(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_replaced_node_port(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 failed_block_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_failed_block_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_failed_block_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string failed_block_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_failed_block_key();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.MultipleRecoveryRequest.failed_block_key"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 failed_block_stripe_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_failed_block_stripe_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_failed_block_stripe_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 cross_rack_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cross_rack_num(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_cross_rack_num(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string datanodeip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_datanodeip();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.MultipleRecoveryRequest.datanodeip"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 datanodeport = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_datanodeport(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_datanodeport(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string blockkeys = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blockkeys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.MultipleRecoveryRequest.blockkeys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 blockids = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_blockids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_blockids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 datanode_num = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_datanode_num(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_datanode_num(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 failed_block_num = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.failed_block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultipleRecoveryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.MultipleRecoveryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string replaced_node_ip = 1;
  for (int i = 0, n = this->_internal_replaced_node_ip_size(); i < n; i++) {
    const auto& s = this->_internal_replaced_node_ip(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.MultipleRecoveryRequest.replaced_node_ip");
    target = stream->WriteString(1, s, target);
  }

  // repeated int32 replaced_node_port = 2;
  {
    int byte_size = _impl_._replaced_node_port_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_replaced_node_port(), byte_size, target);
    }
  }

  // repeated int32 failed_block_id = 3;
  {
    int byte_size = _impl_._failed_block_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_failed_block_id(), byte_size, target);
    }
  }

  // repeated string failed_block_key = 4;
  for (int i = 0, n = this->_internal_failed_block_key_size(); i < n; i++) {
    const auto& s = this->_internal_failed_block_key(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.MultipleRecoveryRequest.failed_block_key");
    target = stream->WriteString(4, s, target);
  }

  // repeated int32 failed_block_stripe_id = 5;
  {
    int byte_size = _impl_._failed_block_stripe_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_failed_block_stripe_id(), byte_size, target);
    }
  }

  // repeated int32 cross_rack_num = 6;
  {
    int byte_size = _impl_._cross_rack_num_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_cross_rack_num(), byte_size, target);
    }
  }

  // repeated string datanodeip = 7;
  for (int i = 0, n = this->_internal_datanodeip_size(); i < n; i++) {
    const auto& s = this->_internal_datanodeip(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.MultipleRecoveryRequest.datanodeip");
    target = stream->WriteString(7, s, target);
  }

  // repeated int32 datanodeport = 8;
  {
    int byte_size = _impl_._datanodeport_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_datanodeport(), byte_size, target);
    }
  }

  // repeated string blockkeys = 9;
  for (int i = 0, n = this->_internal_blockkeys_size(); i < n; i++) {
    const auto& s = this->_internal_blockkeys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.MultipleRecoveryRequest.blockkeys");
    target = stream->WriteString(9, s, target);
  }

  // repeated int32 blockids = 10;
  {
    int byte_size = _impl_._blockids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_blockids(), byte_size, target);
    }
  }

  // repeated int32 datanode_num = 11;
  {
    int byte_size = _impl_._datanode_num_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          11, _internal_datanode_num(), byte_size, target);
    }
  }

  // int32 failed_block_num = 12;
  if (this->_internal_failed_block_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_failed_block_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.MultipleRecoveryRequest)
  return target;
}

size_t MultipleRecoveryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.MultipleRecoveryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string replaced_node_ip = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.replaced_node_ip_.size());
  for (int i = 0, n = _impl_.replaced_node_ip_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.replaced_node_ip_.Get(i));
  }

  // repeated int32 replaced_node_port = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.replaced_node_port_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._replaced_node_port_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 failed_block_id = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.failed_block_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._failed_block_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string failed_block_key = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.failed_block_key_.size());
  for (int i = 0, n = _impl_.failed_block_key_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.failed_block_key_.Get(i));
  }

  // repeated int32 failed_block_stripe_id = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.failed_block_stripe_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._failed_block_stripe_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 cross_rack_num = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.cross_rack_num_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._cross_rack_num_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string datanodeip = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.datanodeip_.size());
  for (int i = 0, n = _impl_.datanodeip_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.datanodeip_.Get(i));
  }

  // repeated int32 datanodeport = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.datanodeport_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._datanodeport_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string blockkeys = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.blockkeys_.size());
  for (int i = 0, n = _impl_.blockkeys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.blockkeys_.Get(i));
  }

  // repeated int32 blockids = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.blockids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._blockids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 datanode_num = 11;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.datanode_num_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._datanode_num_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 failed_block_num = 12;
  if (this->_internal_failed_block_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_failed_block_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultipleRecoveryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultipleRecoveryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultipleRecoveryRequest::GetClassData() const { return &_class_data_; }


void MultipleRecoveryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultipleRecoveryRequest*>(&to_msg);
  auto& from = static_cast<const MultipleRecoveryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.MultipleRecoveryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.replaced_node_ip_.MergeFrom(from._impl_.replaced_node_ip_);
  _this->_impl_.replaced_node_port_.MergeFrom(from._impl_.replaced_node_port_);
  _this->_impl_.failed_block_id_.MergeFrom(from._impl_.failed_block_id_);
  _this->_impl_.failed_block_key_.MergeFrom(from._impl_.failed_block_key_);
  _this->_impl_.failed_block_stripe_id_.MergeFrom(from._impl_.failed_block_stripe_id_);
  _this->_impl_.cross_rack_num_.MergeFrom(from._impl_.cross_rack_num_);
  _this->_impl_.datanodeip_.MergeFrom(from._impl_.datanodeip_);
  _this->_impl_.datanodeport_.MergeFrom(from._impl_.datanodeport_);
  _this->_impl_.blockkeys_.MergeFrom(from._impl_.blockkeys_);
  _this->_impl_.blockids_.MergeFrom(from._impl_.blockids_);
  _this->_impl_.datanode_num_.MergeFrom(from._impl_.datanode_num_);
  if (from._internal_failed_block_num() != 0) {
    _this->_internal_set_failed_block_num(from._internal_failed_block_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultipleRecoveryRequest::CopyFrom(const MultipleRecoveryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.MultipleRecoveryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultipleRecoveryRequest::IsInitialized() const {
  return true;
}

void MultipleRecoveryRequest::InternalSwap(MultipleRecoveryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.replaced_node_ip_.InternalSwap(&other->_impl_.replaced_node_ip_);
  _impl_.replaced_node_port_.InternalSwap(&other->_impl_.replaced_node_port_);
  _impl_.failed_block_id_.InternalSwap(&other->_impl_.failed_block_id_);
  _impl_.failed_block_key_.InternalSwap(&other->_impl_.failed_block_key_);
  _impl_.failed_block_stripe_id_.InternalSwap(&other->_impl_.failed_block_stripe_id_);
  _impl_.cross_rack_num_.InternalSwap(&other->_impl_.cross_rack_num_);
  _impl_.datanodeip_.InternalSwap(&other->_impl_.datanodeip_);
  _impl_.datanodeport_.InternalSwap(&other->_impl_.datanodeport_);
  _impl_.blockkeys_.InternalSwap(&other->_impl_.blockkeys_);
  _impl_.blockids_.InternalSwap(&other->_impl_.blockids_);
  _impl_.datanode_num_.InternalSwap(&other->_impl_.datanode_num_);
  swap(_impl_.failed_block_num_, other->_impl_.failed_block_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultipleRecoveryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[16]);
}

// ===================================================================

class RecoveryReply::_Internal {
 public:
};

RecoveryReply::RecoveryReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.RecoveryReply)
}
RecoveryReply::RecoveryReply(const RecoveryReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecoveryReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.disk_io_start_time_){}
    , decltype(_impl_.disk_io_end_time_){}
    , decltype(_impl_.network_start_time_){}
    , decltype(_impl_.network_end_time_){}
    , decltype(_impl_.decode_start_time_){}
    , decltype(_impl_.decode_end_time_){}
    , decltype(_impl_.cross_rack_time_){}
    , decltype(_impl_.cross_rack_xor_time_){}
    , decltype(_impl_.grpc_start_time_){}
    , decltype(_impl_.data_node_grpc_notify_time_){}
    , decltype(_impl_.data_node_grpc_start_time_){}
    , decltype(_impl_.dest_data_node_network_time_){}
    , decltype(_impl_.dest_data_node_disk_io_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.disk_io_start_time_, &from._impl_.disk_io_start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dest_data_node_disk_io_time_) -
    reinterpret_cast<char*>(&_impl_.disk_io_start_time_)) + sizeof(_impl_.dest_data_node_disk_io_time_));
  // @@protoc_insertion_point(copy_constructor:proxy_proto.RecoveryReply)
}

inline void RecoveryReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.disk_io_start_time_){0}
    , decltype(_impl_.disk_io_end_time_){0}
    , decltype(_impl_.network_start_time_){0}
    , decltype(_impl_.network_end_time_){0}
    , decltype(_impl_.decode_start_time_){0}
    , decltype(_impl_.decode_end_time_){0}
    , decltype(_impl_.cross_rack_time_){0}
    , decltype(_impl_.cross_rack_xor_time_){0}
    , decltype(_impl_.grpc_start_time_){0}
    , decltype(_impl_.data_node_grpc_notify_time_){0}
    , decltype(_impl_.data_node_grpc_start_time_){0}
    , decltype(_impl_.dest_data_node_network_time_){0}
    , decltype(_impl_.dest_data_node_disk_io_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RecoveryReply::~RecoveryReply() {
  // @@protoc_insertion_point(destructor:proxy_proto.RecoveryReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecoveryReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecoveryReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecoveryReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.RecoveryReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.disk_io_start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dest_data_node_disk_io_time_) -
      reinterpret_cast<char*>(&_impl_.disk_io_start_time_)) + sizeof(_impl_.dest_data_node_disk_io_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecoveryReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double disk_io_start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.disk_io_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double disk_io_end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.disk_io_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double network_start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.network_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double network_end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.network_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double decode_start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.decode_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double decode_end_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.decode_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cross_rack_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.cross_rack_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cross_rack_xor_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.cross_rack_xor_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double grpc_start_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.grpc_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double data_node_grpc_notify_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.data_node_grpc_notify_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double data_node_grpc_start_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.data_node_grpc_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double dest_data_node_network_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.dest_data_node_network_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double dest_data_node_disk_io_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.dest_data_node_disk_io_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecoveryReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.RecoveryReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double disk_io_start_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_disk_io_start_time = this->_internal_disk_io_start_time();
  uint64_t raw_disk_io_start_time;
  memcpy(&raw_disk_io_start_time, &tmp_disk_io_start_time, sizeof(tmp_disk_io_start_time));
  if (raw_disk_io_start_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_disk_io_start_time(), target);
  }

  // double disk_io_end_time = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_disk_io_end_time = this->_internal_disk_io_end_time();
  uint64_t raw_disk_io_end_time;
  memcpy(&raw_disk_io_end_time, &tmp_disk_io_end_time, sizeof(tmp_disk_io_end_time));
  if (raw_disk_io_end_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_disk_io_end_time(), target);
  }

  // double network_start_time = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_network_start_time = this->_internal_network_start_time();
  uint64_t raw_network_start_time;
  memcpy(&raw_network_start_time, &tmp_network_start_time, sizeof(tmp_network_start_time));
  if (raw_network_start_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_network_start_time(), target);
  }

  // double network_end_time = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_network_end_time = this->_internal_network_end_time();
  uint64_t raw_network_end_time;
  memcpy(&raw_network_end_time, &tmp_network_end_time, sizeof(tmp_network_end_time));
  if (raw_network_end_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_network_end_time(), target);
  }

  // double decode_start_time = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_decode_start_time = this->_internal_decode_start_time();
  uint64_t raw_decode_start_time;
  memcpy(&raw_decode_start_time, &tmp_decode_start_time, sizeof(tmp_decode_start_time));
  if (raw_decode_start_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_decode_start_time(), target);
  }

  // double decode_end_time = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_decode_end_time = this->_internal_decode_end_time();
  uint64_t raw_decode_end_time;
  memcpy(&raw_decode_end_time, &tmp_decode_end_time, sizeof(tmp_decode_end_time));
  if (raw_decode_end_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_decode_end_time(), target);
  }

  // double cross_rack_time = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cross_rack_time = this->_internal_cross_rack_time();
  uint64_t raw_cross_rack_time;
  memcpy(&raw_cross_rack_time, &tmp_cross_rack_time, sizeof(tmp_cross_rack_time));
  if (raw_cross_rack_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_cross_rack_time(), target);
  }

  // double cross_rack_xor_time = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cross_rack_xor_time = this->_internal_cross_rack_xor_time();
  uint64_t raw_cross_rack_xor_time;
  memcpy(&raw_cross_rack_xor_time, &tmp_cross_rack_xor_time, sizeof(tmp_cross_rack_xor_time));
  if (raw_cross_rack_xor_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_cross_rack_xor_time(), target);
  }

  // double grpc_start_time = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_grpc_start_time = this->_internal_grpc_start_time();
  uint64_t raw_grpc_start_time;
  memcpy(&raw_grpc_start_time, &tmp_grpc_start_time, sizeof(tmp_grpc_start_time));
  if (raw_grpc_start_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_grpc_start_time(), target);
  }

  // double data_node_grpc_notify_time = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_node_grpc_notify_time = this->_internal_data_node_grpc_notify_time();
  uint64_t raw_data_node_grpc_notify_time;
  memcpy(&raw_data_node_grpc_notify_time, &tmp_data_node_grpc_notify_time, sizeof(tmp_data_node_grpc_notify_time));
  if (raw_data_node_grpc_notify_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_data_node_grpc_notify_time(), target);
  }

  // double data_node_grpc_start_time = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_node_grpc_start_time = this->_internal_data_node_grpc_start_time();
  uint64_t raw_data_node_grpc_start_time;
  memcpy(&raw_data_node_grpc_start_time, &tmp_data_node_grpc_start_time, sizeof(tmp_data_node_grpc_start_time));
  if (raw_data_node_grpc_start_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_data_node_grpc_start_time(), target);
  }

  // double dest_data_node_network_time = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dest_data_node_network_time = this->_internal_dest_data_node_network_time();
  uint64_t raw_dest_data_node_network_time;
  memcpy(&raw_dest_data_node_network_time, &tmp_dest_data_node_network_time, sizeof(tmp_dest_data_node_network_time));
  if (raw_dest_data_node_network_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_dest_data_node_network_time(), target);
  }

  // double dest_data_node_disk_io_time = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dest_data_node_disk_io_time = this->_internal_dest_data_node_disk_io_time();
  uint64_t raw_dest_data_node_disk_io_time;
  memcpy(&raw_dest_data_node_disk_io_time, &tmp_dest_data_node_disk_io_time, sizeof(tmp_dest_data_node_disk_io_time));
  if (raw_dest_data_node_disk_io_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_dest_data_node_disk_io_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.RecoveryReply)
  return target;
}

size_t RecoveryReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.RecoveryReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double disk_io_start_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_disk_io_start_time = this->_internal_disk_io_start_time();
  uint64_t raw_disk_io_start_time;
  memcpy(&raw_disk_io_start_time, &tmp_disk_io_start_time, sizeof(tmp_disk_io_start_time));
  if (raw_disk_io_start_time != 0) {
    total_size += 1 + 8;
  }

  // double disk_io_end_time = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_disk_io_end_time = this->_internal_disk_io_end_time();
  uint64_t raw_disk_io_end_time;
  memcpy(&raw_disk_io_end_time, &tmp_disk_io_end_time, sizeof(tmp_disk_io_end_time));
  if (raw_disk_io_end_time != 0) {
    total_size += 1 + 8;
  }

  // double network_start_time = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_network_start_time = this->_internal_network_start_time();
  uint64_t raw_network_start_time;
  memcpy(&raw_network_start_time, &tmp_network_start_time, sizeof(tmp_network_start_time));
  if (raw_network_start_time != 0) {
    total_size += 1 + 8;
  }

  // double network_end_time = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_network_end_time = this->_internal_network_end_time();
  uint64_t raw_network_end_time;
  memcpy(&raw_network_end_time, &tmp_network_end_time, sizeof(tmp_network_end_time));
  if (raw_network_end_time != 0) {
    total_size += 1 + 8;
  }

  // double decode_start_time = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_decode_start_time = this->_internal_decode_start_time();
  uint64_t raw_decode_start_time;
  memcpy(&raw_decode_start_time, &tmp_decode_start_time, sizeof(tmp_decode_start_time));
  if (raw_decode_start_time != 0) {
    total_size += 1 + 8;
  }

  // double decode_end_time = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_decode_end_time = this->_internal_decode_end_time();
  uint64_t raw_decode_end_time;
  memcpy(&raw_decode_end_time, &tmp_decode_end_time, sizeof(tmp_decode_end_time));
  if (raw_decode_end_time != 0) {
    total_size += 1 + 8;
  }

  // double cross_rack_time = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cross_rack_time = this->_internal_cross_rack_time();
  uint64_t raw_cross_rack_time;
  memcpy(&raw_cross_rack_time, &tmp_cross_rack_time, sizeof(tmp_cross_rack_time));
  if (raw_cross_rack_time != 0) {
    total_size += 1 + 8;
  }

  // double cross_rack_xor_time = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cross_rack_xor_time = this->_internal_cross_rack_xor_time();
  uint64_t raw_cross_rack_xor_time;
  memcpy(&raw_cross_rack_xor_time, &tmp_cross_rack_xor_time, sizeof(tmp_cross_rack_xor_time));
  if (raw_cross_rack_xor_time != 0) {
    total_size += 1 + 8;
  }

  // double grpc_start_time = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_grpc_start_time = this->_internal_grpc_start_time();
  uint64_t raw_grpc_start_time;
  memcpy(&raw_grpc_start_time, &tmp_grpc_start_time, sizeof(tmp_grpc_start_time));
  if (raw_grpc_start_time != 0) {
    total_size += 1 + 8;
  }

  // double data_node_grpc_notify_time = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_node_grpc_notify_time = this->_internal_data_node_grpc_notify_time();
  uint64_t raw_data_node_grpc_notify_time;
  memcpy(&raw_data_node_grpc_notify_time, &tmp_data_node_grpc_notify_time, sizeof(tmp_data_node_grpc_notify_time));
  if (raw_data_node_grpc_notify_time != 0) {
    total_size += 1 + 8;
  }

  // double data_node_grpc_start_time = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_node_grpc_start_time = this->_internal_data_node_grpc_start_time();
  uint64_t raw_data_node_grpc_start_time;
  memcpy(&raw_data_node_grpc_start_time, &tmp_data_node_grpc_start_time, sizeof(tmp_data_node_grpc_start_time));
  if (raw_data_node_grpc_start_time != 0) {
    total_size += 1 + 8;
  }

  // double dest_data_node_network_time = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dest_data_node_network_time = this->_internal_dest_data_node_network_time();
  uint64_t raw_dest_data_node_network_time;
  memcpy(&raw_dest_data_node_network_time, &tmp_dest_data_node_network_time, sizeof(tmp_dest_data_node_network_time));
  if (raw_dest_data_node_network_time != 0) {
    total_size += 1 + 8;
  }

  // double dest_data_node_disk_io_time = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dest_data_node_disk_io_time = this->_internal_dest_data_node_disk_io_time();
  uint64_t raw_dest_data_node_disk_io_time;
  memcpy(&raw_dest_data_node_disk_io_time, &tmp_dest_data_node_disk_io_time, sizeof(tmp_dest_data_node_disk_io_time));
  if (raw_dest_data_node_disk_io_time != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecoveryReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecoveryReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecoveryReply::GetClassData() const { return &_class_data_; }


void RecoveryReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecoveryReply*>(&to_msg);
  auto& from = static_cast<const RecoveryReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.RecoveryReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_disk_io_start_time = from._internal_disk_io_start_time();
  uint64_t raw_disk_io_start_time;
  memcpy(&raw_disk_io_start_time, &tmp_disk_io_start_time, sizeof(tmp_disk_io_start_time));
  if (raw_disk_io_start_time != 0) {
    _this->_internal_set_disk_io_start_time(from._internal_disk_io_start_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_disk_io_end_time = from._internal_disk_io_end_time();
  uint64_t raw_disk_io_end_time;
  memcpy(&raw_disk_io_end_time, &tmp_disk_io_end_time, sizeof(tmp_disk_io_end_time));
  if (raw_disk_io_end_time != 0) {
    _this->_internal_set_disk_io_end_time(from._internal_disk_io_end_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_network_start_time = from._internal_network_start_time();
  uint64_t raw_network_start_time;
  memcpy(&raw_network_start_time, &tmp_network_start_time, sizeof(tmp_network_start_time));
  if (raw_network_start_time != 0) {
    _this->_internal_set_network_start_time(from._internal_network_start_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_network_end_time = from._internal_network_end_time();
  uint64_t raw_network_end_time;
  memcpy(&raw_network_end_time, &tmp_network_end_time, sizeof(tmp_network_end_time));
  if (raw_network_end_time != 0) {
    _this->_internal_set_network_end_time(from._internal_network_end_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_decode_start_time = from._internal_decode_start_time();
  uint64_t raw_decode_start_time;
  memcpy(&raw_decode_start_time, &tmp_decode_start_time, sizeof(tmp_decode_start_time));
  if (raw_decode_start_time != 0) {
    _this->_internal_set_decode_start_time(from._internal_decode_start_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_decode_end_time = from._internal_decode_end_time();
  uint64_t raw_decode_end_time;
  memcpy(&raw_decode_end_time, &tmp_decode_end_time, sizeof(tmp_decode_end_time));
  if (raw_decode_end_time != 0) {
    _this->_internal_set_decode_end_time(from._internal_decode_end_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cross_rack_time = from._internal_cross_rack_time();
  uint64_t raw_cross_rack_time;
  memcpy(&raw_cross_rack_time, &tmp_cross_rack_time, sizeof(tmp_cross_rack_time));
  if (raw_cross_rack_time != 0) {
    _this->_internal_set_cross_rack_time(from._internal_cross_rack_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cross_rack_xor_time = from._internal_cross_rack_xor_time();
  uint64_t raw_cross_rack_xor_time;
  memcpy(&raw_cross_rack_xor_time, &tmp_cross_rack_xor_time, sizeof(tmp_cross_rack_xor_time));
  if (raw_cross_rack_xor_time != 0) {
    _this->_internal_set_cross_rack_xor_time(from._internal_cross_rack_xor_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_grpc_start_time = from._internal_grpc_start_time();
  uint64_t raw_grpc_start_time;
  memcpy(&raw_grpc_start_time, &tmp_grpc_start_time, sizeof(tmp_grpc_start_time));
  if (raw_grpc_start_time != 0) {
    _this->_internal_set_grpc_start_time(from._internal_grpc_start_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_node_grpc_notify_time = from._internal_data_node_grpc_notify_time();
  uint64_t raw_data_node_grpc_notify_time;
  memcpy(&raw_data_node_grpc_notify_time, &tmp_data_node_grpc_notify_time, sizeof(tmp_data_node_grpc_notify_time));
  if (raw_data_node_grpc_notify_time != 0) {
    _this->_internal_set_data_node_grpc_notify_time(from._internal_data_node_grpc_notify_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_node_grpc_start_time = from._internal_data_node_grpc_start_time();
  uint64_t raw_data_node_grpc_start_time;
  memcpy(&raw_data_node_grpc_start_time, &tmp_data_node_grpc_start_time, sizeof(tmp_data_node_grpc_start_time));
  if (raw_data_node_grpc_start_time != 0) {
    _this->_internal_set_data_node_grpc_start_time(from._internal_data_node_grpc_start_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dest_data_node_network_time = from._internal_dest_data_node_network_time();
  uint64_t raw_dest_data_node_network_time;
  memcpy(&raw_dest_data_node_network_time, &tmp_dest_data_node_network_time, sizeof(tmp_dest_data_node_network_time));
  if (raw_dest_data_node_network_time != 0) {
    _this->_internal_set_dest_data_node_network_time(from._internal_dest_data_node_network_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dest_data_node_disk_io_time = from._internal_dest_data_node_disk_io_time();
  uint64_t raw_dest_data_node_disk_io_time;
  memcpy(&raw_dest_data_node_disk_io_time, &tmp_dest_data_node_disk_io_time, sizeof(tmp_dest_data_node_disk_io_time));
  if (raw_dest_data_node_disk_io_time != 0) {
    _this->_internal_set_dest_data_node_disk_io_time(from._internal_dest_data_node_disk_io_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecoveryReply::CopyFrom(const RecoveryReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.RecoveryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoveryReply::IsInitialized() const {
  return true;
}

void RecoveryReply::InternalSwap(RecoveryReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecoveryReply, _impl_.dest_data_node_disk_io_time_)
      + sizeof(RecoveryReply::_impl_.dest_data_node_disk_io_time_)
      - PROTOBUF_FIELD_OFFSET(RecoveryReply, _impl_.disk_io_start_time_)>(
          reinterpret_cast<char*>(&_impl_.disk_io_start_time_),
          reinterpret_cast<char*>(&other->_impl_.disk_io_start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecoveryReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[17]);
}

// ===================================================================

class AppendStripeDataPlacement::_Internal {
 public:
};

AppendStripeDataPlacement::AppendStripeDataPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.AppendStripeDataPlacement)
}
AppendStripeDataPlacement::AppendStripeDataPlacement(const AppendStripeDataPlacement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppendStripeDataPlacement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.datanodeip_){from._impl_.datanodeip_}
    , decltype(_impl_.datanodeport_){from._impl_.datanodeport_}
    , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.blockkeys_){from._impl_.blockkeys_}
    , decltype(_impl_.blockids_){from._impl_.blockids_}
    , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
    , decltype(_impl_.offsets_){from._impl_.offsets_}
    , /*decltype(_impl_._offsets_cached_byte_size_)*/{0}
    , decltype(_impl_.sizes_){from._impl_.sizes_}
    , /*decltype(_impl_._sizes_cached_byte_size_)*/{0}
    , decltype(_impl_.key_){}
    , decltype(_impl_.append_mode_){}
    , decltype(_impl_.cluster_id_){}
    , decltype(_impl_.stripe_id_){}
    , decltype(_impl_.append_size_){}
    , decltype(_impl_.is_merge_parity_){}
    , decltype(_impl_.is_serialized_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.append_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.append_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_append_mode().empty()) {
    _this->_impl_.append_mode_.Set(from._internal_append_mode(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cluster_id_, &from._impl_.cluster_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_serialized_) -
    reinterpret_cast<char*>(&_impl_.cluster_id_)) + sizeof(_impl_.is_serialized_));
  // @@protoc_insertion_point(copy_constructor:proxy_proto.AppendStripeDataPlacement)
}

inline void AppendStripeDataPlacement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.datanodeip_){arena}
    , decltype(_impl_.datanodeport_){arena}
    , /*decltype(_impl_._datanodeport_cached_byte_size_)*/{0}
    , decltype(_impl_.blockkeys_){arena}
    , decltype(_impl_.blockids_){arena}
    , /*decltype(_impl_._blockids_cached_byte_size_)*/{0}
    , decltype(_impl_.offsets_){arena}
    , /*decltype(_impl_._offsets_cached_byte_size_)*/{0}
    , decltype(_impl_.sizes_){arena}
    , /*decltype(_impl_._sizes_cached_byte_size_)*/{0}
    , decltype(_impl_.key_){}
    , decltype(_impl_.append_mode_){}
    , decltype(_impl_.cluster_id_){0}
    , decltype(_impl_.stripe_id_){0}
    , decltype(_impl_.append_size_){uint64_t{0u}}
    , decltype(_impl_.is_merge_parity_){false}
    , decltype(_impl_.is_serialized_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.append_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.append_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AppendStripeDataPlacement::~AppendStripeDataPlacement() {
  // @@protoc_insertion_point(destructor:proxy_proto.AppendStripeDataPlacement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppendStripeDataPlacement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datanodeip_.~RepeatedPtrField();
  _impl_.datanodeport_.~RepeatedField();
  _impl_.blockkeys_.~RepeatedPtrField();
  _impl_.blockids_.~RepeatedField();
  _impl_.offsets_.~RepeatedField();
  _impl_.sizes_.~RepeatedField();
  _impl_.key_.Destroy();
  _impl_.append_mode_.Destroy();
}

void AppendStripeDataPlacement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppendStripeDataPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.AppendStripeDataPlacement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datanodeip_.Clear();
  _impl_.datanodeport_.Clear();
  _impl_.blockkeys_.Clear();
  _impl_.blockids_.Clear();
  _impl_.offsets_.Clear();
  _impl_.sizes_.Clear();
  _impl_.key_.ClearToEmpty();
  _impl_.append_mode_.ClearToEmpty();
  ::memset(&_impl_.cluster_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_serialized_) -
      reinterpret_cast<char*>(&_impl_.cluster_id_)) + sizeof(_impl_.is_serialized_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendStripeDataPlacement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.AppendStripeDataPlacement.key"));
        } else
          goto handle_unusual;
        continue;
      // int32 cluster_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cluster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stripe_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.stripe_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 append_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.append_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string datanodeip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_datanodeip();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.AppendStripeDataPlacement.datanodeip"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 datanodeport = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_datanodeport(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_datanodeport(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string blockkeys = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blockkeys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.AppendStripeDataPlacement.blockkeys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 blockids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_blockids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_blockids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 offsets = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_offsets(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_offsets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 sizes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_sizes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_sizes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_merge_parity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.is_merge_parity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string append_mode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_append_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.AppendStripeDataPlacement.append_mode"));
        } else
          goto handle_unusual;
        continue;
      // bool is_serialized = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.is_serialized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppendStripeDataPlacement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.AppendStripeDataPlacement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.AppendStripeDataPlacement.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int32 cluster_id = 2;
  if (this->_internal_cluster_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cluster_id(), target);
  }

  // int32 stripe_id = 3;
  if (this->_internal_stripe_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_stripe_id(), target);
  }

  // uint64 append_size = 4;
  if (this->_internal_append_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_append_size(), target);
  }

  // repeated string datanodeip = 5;
  for (int i = 0, n = this->_internal_datanodeip_size(); i < n; i++) {
    const auto& s = this->_internal_datanodeip(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.AppendStripeDataPlacement.datanodeip");
    target = stream->WriteString(5, s, target);
  }

  // repeated int32 datanodeport = 6;
  {
    int byte_size = _impl_._datanodeport_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_datanodeport(), byte_size, target);
    }
  }

  // repeated string blockkeys = 7;
  for (int i = 0, n = this->_internal_blockkeys_size(); i < n; i++) {
    const auto& s = this->_internal_blockkeys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.AppendStripeDataPlacement.blockkeys");
    target = stream->WriteString(7, s, target);
  }

  // repeated int32 blockids = 8;
  {
    int byte_size = _impl_._blockids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_blockids(), byte_size, target);
    }
  }

  // repeated uint64 offsets = 9;
  {
    int byte_size = _impl_._offsets_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          9, _internal_offsets(), byte_size, target);
    }
  }

  // repeated uint64 sizes = 10;
  {
    int byte_size = _impl_._sizes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          10, _internal_sizes(), byte_size, target);
    }
  }

  // bool is_merge_parity = 11;
  if (this->_internal_is_merge_parity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_is_merge_parity(), target);
  }

  // string append_mode = 12;
  if (!this->_internal_append_mode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_append_mode().data(), static_cast<int>(this->_internal_append_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.AppendStripeDataPlacement.append_mode");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_append_mode(), target);
  }

  // bool is_serialized = 13;
  if (this->_internal_is_serialized() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_is_serialized(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.AppendStripeDataPlacement)
  return target;
}

size_t AppendStripeDataPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.AppendStripeDataPlacement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string datanodeip = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.datanodeip_.size());
  for (int i = 0, n = _impl_.datanodeip_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.datanodeip_.Get(i));
  }

  // repeated int32 datanodeport = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.datanodeport_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._datanodeport_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string blockkeys = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.blockkeys_.size());
  for (int i = 0, n = _impl_.blockkeys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.blockkeys_.Get(i));
  }

  // repeated int32 blockids = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.blockids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._blockids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 offsets = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.offsets_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._offsets_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 sizes = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.sizes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sizes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string append_mode = 12;
  if (!this->_internal_append_mode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_append_mode());
  }

  // int32 cluster_id = 2;
  if (this->_internal_cluster_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cluster_id());
  }

  // int32 stripe_id = 3;
  if (this->_internal_stripe_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stripe_id());
  }

  // uint64 append_size = 4;
  if (this->_internal_append_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_append_size());
  }

  // bool is_merge_parity = 11;
  if (this->_internal_is_merge_parity() != 0) {
    total_size += 1 + 1;
  }

  // bool is_serialized = 13;
  if (this->_internal_is_serialized() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendStripeDataPlacement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppendStripeDataPlacement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendStripeDataPlacement::GetClassData() const { return &_class_data_; }


void AppendStripeDataPlacement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppendStripeDataPlacement*>(&to_msg);
  auto& from = static_cast<const AppendStripeDataPlacement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.AppendStripeDataPlacement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datanodeip_.MergeFrom(from._impl_.datanodeip_);
  _this->_impl_.datanodeport_.MergeFrom(from._impl_.datanodeport_);
  _this->_impl_.blockkeys_.MergeFrom(from._impl_.blockkeys_);
  _this->_impl_.blockids_.MergeFrom(from._impl_.blockids_);
  _this->_impl_.offsets_.MergeFrom(from._impl_.offsets_);
  _this->_impl_.sizes_.MergeFrom(from._impl_.sizes_);
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_append_mode().empty()) {
    _this->_internal_set_append_mode(from._internal_append_mode());
  }
  if (from._internal_cluster_id() != 0) {
    _this->_internal_set_cluster_id(from._internal_cluster_id());
  }
  if (from._internal_stripe_id() != 0) {
    _this->_internal_set_stripe_id(from._internal_stripe_id());
  }
  if (from._internal_append_size() != 0) {
    _this->_internal_set_append_size(from._internal_append_size());
  }
  if (from._internal_is_merge_parity() != 0) {
    _this->_internal_set_is_merge_parity(from._internal_is_merge_parity());
  }
  if (from._internal_is_serialized() != 0) {
    _this->_internal_set_is_serialized(from._internal_is_serialized());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendStripeDataPlacement::CopyFrom(const AppendStripeDataPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.AppendStripeDataPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendStripeDataPlacement::IsInitialized() const {
  return true;
}

void AppendStripeDataPlacement::InternalSwap(AppendStripeDataPlacement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.datanodeip_.InternalSwap(&other->_impl_.datanodeip_);
  _impl_.datanodeport_.InternalSwap(&other->_impl_.datanodeport_);
  _impl_.blockkeys_.InternalSwap(&other->_impl_.blockkeys_);
  _impl_.blockids_.InternalSwap(&other->_impl_.blockids_);
  _impl_.offsets_.InternalSwap(&other->_impl_.offsets_);
  _impl_.sizes_.InternalSwap(&other->_impl_.sizes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.append_mode_, lhs_arena,
      &other->_impl_.append_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendStripeDataPlacement, _impl_.is_serialized_)
      + sizeof(AppendStripeDataPlacement::_impl_.is_serialized_)
      - PROTOBUF_FIELD_OFFSET(AppendStripeDataPlacement, _impl_.cluster_id_)>(
          reinterpret_cast<char*>(&_impl_.cluster_id_),
          reinterpret_cast<char*>(&other->_impl_.cluster_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendStripeDataPlacement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[18]);
}

// ===================================================================

class SetReply::_Internal {
 public:
};

SetReply::SetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.SetReply)
}
SetReply::SetReply(const SetReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ifcommit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ifcommit_ = from._impl_.ifcommit_;
  // @@protoc_insertion_point(copy_constructor:proxy_proto.SetReply)
}

inline void SetReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ifcommit_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetReply::~SetReply() {
  // @@protoc_insertion_point(destructor:proxy_proto.SetReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.SetReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ifcommit_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ifcommit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ifcommit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.SetReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ifcommit = 1;
  if (this->_internal_ifcommit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ifcommit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.SetReply)
  return target;
}

size_t SetReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.SetReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ifcommit = 1;
  if (this->_internal_ifcommit() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetReply::GetClassData() const { return &_class_data_; }


void SetReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetReply*>(&to_msg);
  auto& from = static_cast<const SetReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.SetReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ifcommit() != 0) {
    _this->_internal_set_ifcommit(from._internal_ifcommit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetReply::CopyFrom(const SetReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.SetReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetReply::IsInitialized() const {
  return true;
}

void SetReply::InternalSwap(SetReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ifcommit_, other->_impl_.ifcommit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[19]);
}

// ===================================================================

class GetReply::_Internal {
 public:
};

GetReply::GetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.GetReply)
}
GetReply::GetReply(const GetReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.getsuccess_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.getsuccess_ = from._impl_.getsuccess_;
  // @@protoc_insertion_point(copy_constructor:proxy_proto.GetReply)
}

inline void GetReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.getsuccess_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetReply::~GetReply() {
  // @@protoc_insertion_point(destructor:proxy_proto.GetReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.GetReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.getsuccess_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool getsuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.getsuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.GetReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool getsuccess = 1;
  if (this->_internal_getsuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_getsuccess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.GetReply)
  return target;
}

size_t GetReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.GetReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool getsuccess = 1;
  if (this->_internal_getsuccess() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetReply::GetClassData() const { return &_class_data_; }


void GetReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetReply*>(&to_msg);
  auto& from = static_cast<const GetReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.GetReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_getsuccess() != 0) {
    _this->_internal_set_getsuccess(from._internal_getsuccess());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetReply::CopyFrom(const GetReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.GetReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReply::IsInitialized() const {
  return true;
}

void GetReply::InternalSwap(GetReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.getsuccess_, other->_impl_.getsuccess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[20]);
}

// ===================================================================

class StripeAndBlockIDs::_Internal {
 public:
};

StripeAndBlockIDs::StripeAndBlockIDs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proxy_proto.StripeAndBlockIDs)
}
StripeAndBlockIDs::StripeAndBlockIDs(const StripeAndBlockIDs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StripeAndBlockIDs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_ids_){from._impl_.block_ids_}
    , /*decltype(_impl_._block_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.block_keys_){from._impl_.block_keys_}
    , decltype(_impl_.datanodeips_){from._impl_.datanodeips_}
    , decltype(_impl_.datanodeports_){from._impl_.datanodeports_}
    , /*decltype(_impl_._datanodeports_cached_byte_size_)*/{0}
    , decltype(_impl_.clientip_){}
    , decltype(_impl_.stripe_id_){}
    , decltype(_impl_.group_id_){}
    , decltype(_impl_.clientport_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientip().empty()) {
    _this->_impl_.clientip_.Set(from._internal_clientip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.stripe_id_, &from._impl_.stripe_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clientport_) -
    reinterpret_cast<char*>(&_impl_.stripe_id_)) + sizeof(_impl_.clientport_));
  // @@protoc_insertion_point(copy_constructor:proxy_proto.StripeAndBlockIDs)
}

inline void StripeAndBlockIDs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.block_ids_){arena}
    , /*decltype(_impl_._block_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.block_keys_){arena}
    , decltype(_impl_.datanodeips_){arena}
    , decltype(_impl_.datanodeports_){arena}
    , /*decltype(_impl_._datanodeports_cached_byte_size_)*/{0}
    , decltype(_impl_.clientip_){}
    , decltype(_impl_.stripe_id_){0}
    , decltype(_impl_.group_id_){0}
    , decltype(_impl_.clientport_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StripeAndBlockIDs::~StripeAndBlockIDs() {
  // @@protoc_insertion_point(destructor:proxy_proto.StripeAndBlockIDs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StripeAndBlockIDs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.block_ids_.~RepeatedField();
  _impl_.block_keys_.~RepeatedPtrField();
  _impl_.datanodeips_.~RepeatedPtrField();
  _impl_.datanodeports_.~RepeatedField();
  _impl_.clientip_.Destroy();
}

void StripeAndBlockIDs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StripeAndBlockIDs::Clear() {
// @@protoc_insertion_point(message_clear_start:proxy_proto.StripeAndBlockIDs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.block_ids_.Clear();
  _impl_.block_keys_.Clear();
  _impl_.datanodeips_.Clear();
  _impl_.datanodeports_.Clear();
  _impl_.clientip_.ClearToEmpty();
  ::memset(&_impl_.stripe_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.clientport_) -
      reinterpret_cast<char*>(&_impl_.stripe_id_)) + sizeof(_impl_.clientport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StripeAndBlockIDs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 stripe_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.stripe_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string clientip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_clientip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.StripeAndBlockIDs.clientip"));
        } else
          goto handle_unusual;
        continue;
      // int32 clientport = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.clientport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 block_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_block_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_block_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string block_keys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_block_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.StripeAndBlockIDs.block_keys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string datanodeips = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_datanodeips();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proxy_proto.StripeAndBlockIDs.datanodeips"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 datanodeports = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_datanodeports(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_datanodeports(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StripeAndBlockIDs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proxy_proto.StripeAndBlockIDs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stripe_id = 1;
  if (this->_internal_stripe_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_stripe_id(), target);
  }

  // int32 group_id = 2;
  if (this->_internal_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_group_id(), target);
  }

  // string clientip = 3;
  if (!this->_internal_clientip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientip().data(), static_cast<int>(this->_internal_clientip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.StripeAndBlockIDs.clientip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clientip(), target);
  }

  // int32 clientport = 4;
  if (this->_internal_clientport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_clientport(), target);
  }

  // repeated int32 block_ids = 5;
  {
    int byte_size = _impl_._block_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_block_ids(), byte_size, target);
    }
  }

  // repeated string block_keys = 6;
  for (int i = 0, n = this->_internal_block_keys_size(); i < n; i++) {
    const auto& s = this->_internal_block_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.StripeAndBlockIDs.block_keys");
    target = stream->WriteString(6, s, target);
  }

  // repeated string datanodeips = 7;
  for (int i = 0, n = this->_internal_datanodeips_size(); i < n; i++) {
    const auto& s = this->_internal_datanodeips(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proxy_proto.StripeAndBlockIDs.datanodeips");
    target = stream->WriteString(7, s, target);
  }

  // repeated int32 datanodeports = 8;
  {
    int byte_size = _impl_._datanodeports_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_datanodeports(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proxy_proto.StripeAndBlockIDs)
  return target;
}

size_t StripeAndBlockIDs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proxy_proto.StripeAndBlockIDs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 block_ids = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.block_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._block_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string block_keys = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.block_keys_.size());
  for (int i = 0, n = _impl_.block_keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.block_keys_.Get(i));
  }

  // repeated string datanodeips = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.datanodeips_.size());
  for (int i = 0, n = _impl_.datanodeips_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.datanodeips_.Get(i));
  }

  // repeated int32 datanodeports = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.datanodeports_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._datanodeports_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string clientip = 3;
  if (!this->_internal_clientip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientip());
  }

  // int32 stripe_id = 1;
  if (this->_internal_stripe_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stripe_id());
  }

  // int32 group_id = 2;
  if (this->_internal_group_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_group_id());
  }

  // int32 clientport = 4;
  if (this->_internal_clientport() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clientport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StripeAndBlockIDs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StripeAndBlockIDs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StripeAndBlockIDs::GetClassData() const { return &_class_data_; }


void StripeAndBlockIDs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StripeAndBlockIDs*>(&to_msg);
  auto& from = static_cast<const StripeAndBlockIDs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proxy_proto.StripeAndBlockIDs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.block_ids_.MergeFrom(from._impl_.block_ids_);
  _this->_impl_.block_keys_.MergeFrom(from._impl_.block_keys_);
  _this->_impl_.datanodeips_.MergeFrom(from._impl_.datanodeips_);
  _this->_impl_.datanodeports_.MergeFrom(from._impl_.datanodeports_);
  if (!from._internal_clientip().empty()) {
    _this->_internal_set_clientip(from._internal_clientip());
  }
  if (from._internal_stripe_id() != 0) {
    _this->_internal_set_stripe_id(from._internal_stripe_id());
  }
  if (from._internal_group_id() != 0) {
    _this->_internal_set_group_id(from._internal_group_id());
  }
  if (from._internal_clientport() != 0) {
    _this->_internal_set_clientport(from._internal_clientport());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StripeAndBlockIDs::CopyFrom(const StripeAndBlockIDs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proxy_proto.StripeAndBlockIDs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripeAndBlockIDs::IsInitialized() const {
  return true;
}

void StripeAndBlockIDs::InternalSwap(StripeAndBlockIDs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.block_ids_.InternalSwap(&other->_impl_.block_ids_);
  _impl_.block_keys_.InternalSwap(&other->_impl_.block_keys_);
  _impl_.datanodeips_.InternalSwap(&other->_impl_.datanodeips_);
  _impl_.datanodeports_.InternalSwap(&other->_impl_.datanodeports_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientip_, lhs_arena,
      &other->_impl_.clientip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StripeAndBlockIDs, _impl_.clientport_)
      + sizeof(StripeAndBlockIDs::_impl_.clientport_)
      - PROTOBUF_FIELD_OFFSET(StripeAndBlockIDs, _impl_.stripe_id_)>(
          reinterpret_cast<char*>(&_impl_.stripe_id_),
          reinterpret_cast<char*>(&other->_impl_.stripe_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StripeAndBlockIDs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proxy_2eproto_getter, &descriptor_table_proxy_2eproto_once,
      file_level_metadata_proxy_2eproto[21]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proxy_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proxy_proto::locationInfo*
Arena::CreateMaybeMessage< ::proxy_proto::locationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::locationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::mainRecalPlan*
Arena::CreateMaybeMessage< ::proxy_proto::mainRecalPlan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::mainRecalPlan >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::RecalReply*
Arena::CreateMaybeMessage< ::proxy_proto::RecalReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::RecalReply >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::helpRecalPlan*
Arena::CreateMaybeMessage< ::proxy_proto::helpRecalPlan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::helpRecalPlan >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::blockRelocPlan*
Arena::CreateMaybeMessage< ::proxy_proto::blockRelocPlan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::blockRelocPlan >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::blockRelocReply*
Arena::CreateMaybeMessage< ::proxy_proto::blockRelocReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::blockRelocReply >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::AskIfSuccess*
Arena::CreateMaybeMessage< ::proxy_proto::AskIfSuccess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::AskIfSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::RepIfSuccess*
Arena::CreateMaybeMessage< ::proxy_proto::RepIfSuccess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::RepIfSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::NodeAndBlock*
Arena::CreateMaybeMessage< ::proxy_proto::NodeAndBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::NodeAndBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::DelReply*
Arena::CreateMaybeMessage< ::proxy_proto::DelReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::DelReply >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::CheckaliveCMD*
Arena::CreateMaybeMessage< ::proxy_proto::CheckaliveCMD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::CheckaliveCMD >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::RequestResult*
Arena::CreateMaybeMessage< ::proxy_proto::RequestResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::RequestResult >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::ObjectAndPlacement*
Arena::CreateMaybeMessage< ::proxy_proto::ObjectAndPlacement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::ObjectAndPlacement >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::DegradedReadRequest*
Arena::CreateMaybeMessage< ::proxy_proto::DegradedReadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::DegradedReadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::DegradedReadReply*
Arena::CreateMaybeMessage< ::proxy_proto::DegradedReadReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::DegradedReadReply >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::RecoveryRequest*
Arena::CreateMaybeMessage< ::proxy_proto::RecoveryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::RecoveryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::MultipleRecoveryRequest*
Arena::CreateMaybeMessage< ::proxy_proto::MultipleRecoveryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::MultipleRecoveryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::RecoveryReply*
Arena::CreateMaybeMessage< ::proxy_proto::RecoveryReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::RecoveryReply >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::AppendStripeDataPlacement*
Arena::CreateMaybeMessage< ::proxy_proto::AppendStripeDataPlacement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::AppendStripeDataPlacement >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::SetReply*
Arena::CreateMaybeMessage< ::proxy_proto::SetReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::SetReply >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::GetReply*
Arena::CreateMaybeMessage< ::proxy_proto::GetReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::GetReply >(arena);
}
template<> PROTOBUF_NOINLINE ::proxy_proto::StripeAndBlockIDs*
Arena::CreateMaybeMessage< ::proxy_proto::StripeAndBlockIDs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proxy_proto::StripeAndBlockIDs >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
